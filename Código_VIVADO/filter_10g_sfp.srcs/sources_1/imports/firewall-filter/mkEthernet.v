//
// Generated by Bluespec Compiler (build 2c1ed34)
//
// On Sun Jun  6 20:10:40 -03 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_parser                     O     1 const
// RDY_activate                   O     1 const
// macDst                         O    48 reg
// RDY_macDst                     O     1 const
// macSrc                         O    48 reg
// RDY_macSrc                     O     1 const
// ethType                        O    16 reg
// RDY_ethType                    O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// parser_d                       I   112 reg
// activate_v                     I     1 reg
// EN_parser                      I     1
// EN_activate                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkEthernet(CLK,
		  RST_N,

		  parser_d,
		  EN_parser,
		  RDY_parser,

		  activate_v,
		  EN_activate,
		  RDY_activate,

		  macDst,
		  RDY_macDst,

		  macSrc,
		  RDY_macSrc,

		  ethType,
		  RDY_ethType);
  input  CLK;
  input  RST_N;

  // action method parser
  input  [111 : 0] parser_d;
  input  EN_parser;
  output RDY_parser;

  // action method activate
  input  activate_v;
  input  EN_activate;
  output RDY_activate;

  // value method macDst
  output [47 : 0] macDst;
  output RDY_macDst;

  // value method macSrc
  output [47 : 0] macSrc;
  output RDY_macSrc;

  // value method ethType
  output [15 : 0] ethType;
  output RDY_ethType;

  // signals for module outputs
  wire [47 : 0] macDst, macSrc;
  wire [15 : 0] ethType;
  wire RDY_activate, RDY_ethType, RDY_macDst, RDY_macSrc, RDY_parser;

  // register active
  reg active;
  wire active$D_IN, active$EN;

  // register data
  reg [111 : 0] data;
  wire [111 : 0] data$D_IN;
  wire data$EN;

  // register eth_type
  reg [15 : 0] eth_type;
  wire [15 : 0] eth_type$D_IN;
  wire eth_type$EN;

  // register mac_dst
  reg [47 : 0] mac_dst;
  wire [47 : 0] mac_dst$D_IN;
  wire mac_dst$EN;

  // register mac_src
  reg [47 : 0] mac_src;
  wire [47 : 0] mac_src$D_IN;
  wire mac_src$EN;

  // action method parser
  assign RDY_parser = 1'd1 ;

  // action method activate
  assign RDY_activate = 1'd1 ;

  // value method macDst
  assign macDst = mac_dst ;
  assign RDY_macDst = 1'd1 ;

  // value method macSrc
  assign macSrc = mac_src ;
  assign RDY_macSrc = 1'd1 ;

  // value method ethType
  assign ethType = eth_type ;
  assign RDY_ethType = 1'd1 ;

  // register active
  assign active$D_IN = activate_v ;
  assign active$EN = EN_activate ;

  // register data
  assign data$D_IN = parser_d ;
  assign data$EN = EN_parser ;

  // register eth_type
  assign eth_type$D_IN = data[15:0] ;
  assign eth_type$EN = active ;

  // register mac_dst
  assign mac_dst$D_IN = data[111:64] ;
  assign mac_dst$EN = active ;

  // register mac_src
  assign mac_src$D_IN = data[63:16] ;
  assign mac_src$EN = active ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        active <= `BSV_ASSIGNMENT_DELAY 1'd0;
	data <= `BSV_ASSIGNMENT_DELAY 112'hAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	eth_type <= `BSV_ASSIGNMENT_DELAY 16'h0;
	mac_dst <= `BSV_ASSIGNMENT_DELAY 48'h0;
	mac_src <= `BSV_ASSIGNMENT_DELAY 48'h0;
      end
    else
      begin
        if (active$EN) active <= `BSV_ASSIGNMENT_DELAY active$D_IN;
	if (data$EN) data <= `BSV_ASSIGNMENT_DELAY data$D_IN;
	if (eth_type$EN) eth_type <= `BSV_ASSIGNMENT_DELAY eth_type$D_IN;
	if (mac_dst$EN) mac_dst <= `BSV_ASSIGNMENT_DELAY mac_dst$D_IN;
	if (mac_src$EN) mac_src <= `BSV_ASSIGNMENT_DELAY mac_src$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    active = 1'h0;
    data = 112'hAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    eth_type = 16'hAAAA;
    mac_dst = 48'hAAAAAAAAAAAA;
    mac_src = 48'hAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkEthernet

