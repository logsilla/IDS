//
// Generated by Bluespec Compiler (build 2c1ed34)
//
// On Sun Jun 27 17:15:06 -03 2021
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTbIfc(CLK,
	       RST_N);
  input  CLK;
  input  RST_N;

  // register cnt
  reg [31 : 0] cnt;
  wire [31 : 0] cnt$D_IN;
  wire cnt$EN;

  // register rx_data
  reg [63 : 0] rx_data;
  reg [63 : 0] rx_data$D_IN;
  wire rx_data$EN;

  // register rx_keep
  reg [7 : 0] rx_keep;
  reg [7 : 0] rx_keep$D_IN;
  wire rx_keep$EN;

  // register rx_last
  reg rx_last;
  reg rx_last$D_IN;
  wire rx_last$EN;

  // register rx_user
  reg rx_user;
  reg rx_user$D_IN;
  wire rx_user$EN;

  // register rx_valid
  reg rx_valid;
  reg rx_valid$D_IN;
  wire rx_valid$EN;

  // ports of submodule ifc
  wire [63 : 0] ifc$mac_rx_data_data;
  wire [7 : 0] ifc$mac_rx_keep_keep;
  wire ifc$mac_rx_last_last,
       ifc$mac_rx_user_user,
       ifc$mac_rx_valid_valid,
       ifc$mac_tx_ready_ready;

  // rule scheduling signals
  wire WILL_FIRE_RL_pck2,
       WILL_FIRE_RL_pck3,
       WILL_FIRE_RL_pck4,
       WILL_FIRE_RL_start;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_rx_data$write_1__VAL_1,
	       MUX_rx_data$write_1__VAL_2,
	       MUX_rx_data$write_1__VAL_3,
	       MUX_rx_data$write_1__VAL_5;
  reg [7 : 0] MUX_rx_keep$write_1__VAL_1,
	      MUX_rx_keep$write_1__VAL_2,
	      MUX_rx_keep$write_1__VAL_3,
	      MUX_rx_keep$write_1__VAL_5;
  wire [31 : 0] MUX_cnt$write_1__VAL_1, MUX_cnt$write_1__VAL_2;
  wire MUX_cnt$write_1__SEL_1,
       MUX_rx_data$write_1__SEL_1,
       MUX_rx_data$write_1__SEL_2,
       MUX_rx_data$write_1__SEL_3,
       MUX_rx_data$write_1__SEL_4,
       MUX_rx_data$write_1__SEL_5,
       MUX_rx_keep$write_1__SEL_4,
       MUX_rx_keep$write_1__SEL_5,
       MUX_rx_last$write_1__SEL_4,
       MUX_rx_last$write_1__SEL_5,
       MUX_rx_user$write_1__SEL_4,
       MUX_rx_user$write_1__SEL_5,
       MUX_rx_valid$write_1__SEL_4,
       MUX_rx_valid$write_1__SEL_5,
       MUX_rx_valid$write_1__VAL_1,
       MUX_rx_valid$write_1__VAL_2,
       MUX_rx_valid$write_1__VAL_3,
       MUX_rx_valid$write_1__VAL_5;

  // remaining internal signals
  wire _dfoo1, _dfoo11, cnt_SLT_12___d16;

  // submodule ifc
  mkNetwork ifc(.CLK(CLK),
		.RST_N(RST_N),
		.mac_rx_data_data(ifc$mac_rx_data_data),
		.mac_rx_keep_keep(ifc$mac_rx_keep_keep),
		.mac_rx_last_last(ifc$mac_rx_last_last),
		.mac_rx_user_user(ifc$mac_rx_user_user),
		.mac_rx_valid_valid(ifc$mac_rx_valid_valid),
		.mac_tx_ready_ready(ifc$mac_tx_ready_ready),
		.mac_tx_data(),
		.mac_tx_last(),
		.mac_tx_user(),
		.mac_tx_valid(),
		.mac_tx_keep());

  // rule RL_start
  assign WILL_FIRE_RL_start =
	     (cnt ^ 32'h80000000) >= 32'h80000047 &&
	     (cnt ^ 32'h80000000) <= 32'h80000048 ;

  // rule RL_pck2
  assign WILL_FIRE_RL_pck2 =
	     !cnt_SLT_12___d16 && (cnt ^ 32'h80000000) <= 32'h80000016 ;

  // rule RL_pck3
  assign WILL_FIRE_RL_pck3 =
	     (cnt ^ 32'h80000000) >= 32'h80000017 &&
	     (cnt ^ 32'h80000000) <= 32'h8000003A ;

  // rule RL_pck4
  assign WILL_FIRE_RL_pck4 =
	     (cnt ^ 32'h80000000) >= 32'h8000003B &&
	     (cnt ^ 32'h80000000) <= 32'h80000046 ;

  // inputs to muxes for submodule ports
  assign MUX_cnt$write_1__SEL_1 =
	     WILL_FIRE_RL_pck4 || WILL_FIRE_RL_pck3 || WILL_FIRE_RL_pck2 ||
	     cnt_SLT_12___d16 ;
  assign MUX_rx_data$write_1__SEL_1 =
	     WILL_FIRE_RL_pck2 &&
	     (cnt == 32'd12 || cnt == 32'd13 || cnt == 32'd14 ||
	      cnt == 32'd15 ||
	      cnt == 32'd16 ||
	      cnt == 32'd17 ||
	      cnt == 32'd18 ||
	      cnt == 32'd19 ||
	      cnt == 32'd20 ||
	      cnt == 32'd21 ||
	      cnt == 32'd22) ;
  assign MUX_rx_data$write_1__SEL_2 =
	     WILL_FIRE_RL_pck3 &&
	     (cnt == 32'd23 || cnt == 32'd24 || cnt == 32'd25 ||
	      cnt == 32'd26 ||
	      cnt == 32'd27 ||
	      cnt == 32'd28 ||
	      cnt == 32'd29 ||
	      cnt == 32'd30 ||
	      cnt == 32'd31 ||
	      cnt == 32'd32 ||
	      cnt == 32'd33 ||
	      cnt == 32'd34 ||
	      cnt == 32'd35 ||
	      cnt == 32'd36 ||
	      cnt == 32'd37 ||
	      cnt == 32'd38 ||
	      cnt == 32'd39 ||
	      cnt == 32'd40 ||
	      cnt == 32'd41 ||
	      cnt == 32'd42 ||
	      cnt == 32'd43 ||
	      cnt == 32'd44 ||
	      cnt == 32'd45 ||
	      cnt == 32'd46 ||
	      cnt == 32'd47 ||
	      cnt == 32'd48 ||
	      cnt == 32'd49 ||
	      cnt == 32'd50 ||
	      cnt == 32'd51 ||
	      cnt == 32'd52 ||
	      cnt == 32'd53 ||
	      cnt == 32'd54 ||
	      cnt == 32'd55 ||
	      cnt == 32'd56 ||
	      cnt == 32'd57 ||
	      cnt == 32'd58) ;
  assign MUX_rx_data$write_1__SEL_3 =
	     WILL_FIRE_RL_pck4 &&
	     (cnt == 32'd59 || cnt == 32'd60 || cnt == 32'd61 ||
	      cnt == 32'd62 ||
	      cnt == 32'd63 ||
	      cnt == 32'd64 ||
	      cnt == 32'd65 ||
	      cnt == 32'd66 ||
	      cnt == 32'd67 ||
	      cnt == 32'd68 ||
	      cnt == 32'd69 ||
	      cnt == 32'd70) ;
  assign MUX_rx_data$write_1__SEL_4 = WILL_FIRE_RL_start && _dfoo1 ;
  assign MUX_rx_data$write_1__SEL_5 = cnt_SLT_12___d16 && _dfoo11 ;
  assign MUX_rx_keep$write_1__SEL_4 = WILL_FIRE_RL_start && _dfoo1 ;
  assign MUX_rx_keep$write_1__SEL_5 = cnt_SLT_12___d16 && _dfoo11 ;
  assign MUX_rx_last$write_1__SEL_4 = WILL_FIRE_RL_start && _dfoo1 ;
  assign MUX_rx_last$write_1__SEL_5 = cnt_SLT_12___d16 && _dfoo11 ;
  assign MUX_rx_user$write_1__SEL_4 = WILL_FIRE_RL_start && _dfoo1 ;
  assign MUX_rx_user$write_1__SEL_5 = cnt_SLT_12___d16 && _dfoo11 ;
  assign MUX_rx_valid$write_1__SEL_4 = WILL_FIRE_RL_start && _dfoo1 ;
  assign MUX_rx_valid$write_1__SEL_5 = cnt_SLT_12___d16 && _dfoo11 ;
  assign MUX_cnt$write_1__VAL_1 = cnt + 32'd1 ;
  assign MUX_cnt$write_1__VAL_2 =
	     ((cnt ^ 32'h80000000) < 32'h80000048) ? cnt + 32'd1 : 32'd0 ;
  always@(cnt)
  begin
    case (cnt)
      32'd12: MUX_rx_data$write_1__VAL_1 = 64'h1E00FFFFFFFFFFFF;
      32'd13: MUX_rx_data$write_1__VAL_1 = 64'h01000608FF0827C9;
      32'd14: MUX_rx_data$write_1__VAL_1 = 64'h1E00010004060008;
      32'd15: MUX_rx_data$write_1__VAL_1 = 64'h0233A8C0FF0827C9;
      32'd16: MUX_rx_data$write_1__VAL_1 = 64'hA8C0000000000000;
      32'd17: MUX_rx_data$write_1__VAL_1 = 64'd819;
      default: MUX_rx_data$write_1__VAL_1 = 64'h0;
    endcase
  end
  always@(cnt)
  begin
    case (cnt)
      32'd23: MUX_rx_data$write_1__VAL_2 = 64'hA000A3B66F24A000;
      32'd24: MUX_rx_data$write_1__VAL_2 = 64'h0060DD8602B76F24;
      32'd25: MUX_rx_data$write_1__VAL_2 = 64'h155F4006CB000000;
      32'd26, 32'd28: MUX_rx_data$write_1__VAL_2 = 64'hBD00000EC0820050;
      32'd27: MUX_rx_data$write_1__VAL_2 = 64'h155F02B76F24A000;
      32'd29: MUX_rx_data$write_1__VAL_2 = 64'h3F23A3B66F24A000;
      32'd30: MUX_rx_data$write_1__VAL_2 = 64'h411E4ABCA9630604;
      32'd31: MUX_rx_data$write_1__VAL_2 = 64'h8A748043188080B0;
      32'd32: MUX_rx_data$write_1__VAL_2 = 64'h0A000A0801010000;
      32'd33: MUX_rx_data$write_1__VAL_2 = 64'h614CD5140000D996;
      32'd34: MUX_rx_data$write_1__VAL_2 = 64'h6E69676F6C207473;
      32'd35: MUX_rx_data$write_1__VAL_2 = 64'h614A20657554203A;
      32'd36: MUX_rx_data$write_1__VAL_2 = 64'h3A3731203720206E;
      32'd37: MUX_rx_data$write_1__VAL_2 = 64'h72662036343A3330;
      32'd38: MUX_rx_data$write_1__VAL_2 = 64'h6563696C61206D6F;
      32'd39: MUX_rx_data$write_1__VAL_2 = 64'h367670692E36762D;
      32'd40: MUX_rx_data$write_1__VAL_2 = 64'h6E696E7261570A0D;
      32'd41: MUX_rx_data$write_1__VAL_2 = 64'h654B206F6E203A67;
      32'd42: MUX_rx_data$write_1__VAL_2 = 64'h7420736F72656272;
      32'd43: MUX_rx_data$write_1__VAL_2 = 64'h69207374656B6369;
      32'd44: MUX_rx_data$write_1__VAL_2 = 64'h0A0D2E6465757373;
      32'd45: MUX_rx_data$write_1__VAL_2 = 64'h204453426E65704F;
      32'd46: MUX_rx_data$write_1__VAL_2 = 64'h4E50492820322E31;
      32'd47: MUX_rx_data$write_1__VAL_2 = 64'h3123202952454B47;
      32'd48: MUX_rx_data$write_1__VAL_2 = 64'h6F4E20697246203A;
      32'd49: MUX_rx_data$write_1__VAL_2 = 64'h3A38302035312076;
      32'd50: MUX_rx_data$write_1__VAL_2 = 64'h53502032343A3330;
      32'd51: MUX_rx_data$write_1__VAL_2 = 64'h0A0D363939312054;
      32'd52: MUX_rx_data$write_1__VAL_2 = 64'h6D6F636C65570A0D;
      32'd53: MUX_rx_data$write_1__VAL_2 = 64'h65704F206F742065;
      32'd54: MUX_rx_data$write_1__VAL_2 = 64'h0D0A0D2E4453426E;
      32'd55: MUX_rx_data$write_1__VAL_2 = 64'h000000A9445FA30A;
      default: MUX_rx_data$write_1__VAL_2 = 64'h0;
    endcase
  end
  always@(cnt)
  begin
    case (cnt)
      32'd59: MUX_rx_data$write_1__VAL_3 = 64'h7210AE6CDA53C764;
      32'd60: MUX_rx_data$write_1__VAL_3 = 64'h0045000888310A23;
      32'd61: MUX_rx_data$write_1__VAL_3 = 64'h0636004000003C00;
      32'd62: MUX_rx_data$write_1__VAL_3 = 64'hA8C00604A0C869A8;
      32'd63: MUX_rx_data$write_1__VAL_3 = 64'hD97C85EFBB01040F;
      32'd64: MUX_rx_data$write_1__VAL_3 = 64'h12A0FF48EA6CF378;
      32'd65: MUX_rx_data$write_1__VAL_3 = 64'h04020000465A88FE;
      32'd66: MUX_rx_data$write_1__VAL_3 = 64'h11100A080204AC05;
      32'd67: MUX_rx_data$write_1__VAL_3 = 64'h03010F621464A9DF;
      32'd68: MUX_rx_data$write_1__VAL_3 = 64'd1795;
      default: MUX_rx_data$write_1__VAL_3 = 64'h0;
    endcase
  end
  always@(cnt)
  begin
    case (cnt)
      32'd0: MUX_rx_data$write_1__VAL_5 = 64'hC76488310A237210;
      32'd1: MUX_rx_data$write_1__VAL_5 = 64'h00450008AE6CDA53;
      32'd2: MUX_rx_data$write_1__VAL_5 = 64'h0640004000004000;
      32'd3: MUX_rx_data$write_1__VAL_5 = 64'hA0C8040FA8C0659E;
      32'd4: MUX_rx_data$write_1__VAL_5 = 64'hEA6CBB0185EF0604;
      32'd5: MUX_rx_data$write_1__VAL_5 = 64'h02B000000000FE48;
      32'd6: MUX_rx_data$write_1__VAL_5 = 64'h040200005C2DFFFF;
      32'd7: MUX_rx_data$write_1__VAL_5 = 64'h010106030301B405;
      32'd8: MUX_rx_data$write_1__VAL_5 = 64'h00000F6214640A08;
      32'd9: MUX_rx_data$write_1__VAL_5 = 64'd33816576;
      default: MUX_rx_data$write_1__VAL_5 = 64'h0;
    endcase
  end
  always@(cnt)
  begin
    case (cnt)
      32'd12, 32'd13, 32'd14, 32'd15, 32'd16, 32'd17, 32'd18:
	  MUX_rx_keep$write_1__VAL_1 = 8'hFF;
      32'd19: MUX_rx_keep$write_1__VAL_1 = 8'h0F;
      default: MUX_rx_keep$write_1__VAL_1 = 8'hFF;
    endcase
  end
  always@(cnt)
  begin
    case (cnt)
      32'd23,
      32'd24,
      32'd25,
      32'd26,
      32'd27,
      32'd28,
      32'd29,
      32'd30,
      32'd31,
      32'd32,
      32'd33,
      32'd34,
      32'd35,
      32'd36,
      32'd37,
      32'd38,
      32'd39,
      32'd40,
      32'd41,
      32'd42,
      32'd43,
      32'd44,
      32'd45,
      32'd46,
      32'd47,
      32'd48,
      32'd49,
      32'd50,
      32'd51,
      32'd52,
      32'd53,
      32'd54:
	  MUX_rx_keep$write_1__VAL_2 = 8'hFF;
      32'd55: MUX_rx_keep$write_1__VAL_2 = 8'h3F;
      default: MUX_rx_keep$write_1__VAL_2 = 8'hFF;
    endcase
  end
  always@(cnt)
  begin
    case (cnt)
      32'd59, 32'd60, 32'd61, 32'd62, 32'd63, 32'd64, 32'd65, 32'd66, 32'd67:
	  MUX_rx_keep$write_1__VAL_3 = 8'hFF;
      32'd68: MUX_rx_keep$write_1__VAL_3 = 8'h03;
      default: MUX_rx_keep$write_1__VAL_3 = 8'hFF;
    endcase
  end
  always@(cnt)
  begin
    case (cnt)
      32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8:
	  MUX_rx_keep$write_1__VAL_5 = 8'hFF;
      32'd9: MUX_rx_keep$write_1__VAL_5 = 8'h3F;
      default: MUX_rx_keep$write_1__VAL_5 = 8'hFF;
    endcase
  end
  assign MUX_rx_valid$write_1__VAL_1 =
	     cnt == 32'd12 || cnt == 32'd13 || cnt == 32'd14 ||
	     cnt == 32'd15 ||
	     cnt == 32'd16 ||
	     cnt == 32'd17 ||
	     cnt == 32'd18 ||
	     cnt == 32'd19 ;
  assign MUX_rx_valid$write_1__VAL_2 =
	     cnt == 32'd23 || cnt == 32'd24 || cnt == 32'd25 ||
	     cnt == 32'd26 ||
	     cnt == 32'd27 ||
	     cnt == 32'd28 ||
	     cnt == 32'd29 ||
	     cnt == 32'd30 ||
	     cnt == 32'd31 ||
	     cnt == 32'd32 ||
	     cnt == 32'd33 ||
	     cnt == 32'd34 ||
	     cnt == 32'd35 ||
	     cnt == 32'd36 ||
	     cnt == 32'd37 ||
	     cnt == 32'd38 ||
	     cnt == 32'd39 ||
	     cnt == 32'd40 ||
	     cnt == 32'd41 ||
	     cnt == 32'd42 ||
	     cnt == 32'd43 ||
	     cnt == 32'd44 ||
	     cnt == 32'd45 ||
	     cnt == 32'd46 ||
	     cnt == 32'd47 ||
	     cnt == 32'd48 ||
	     cnt == 32'd49 ||
	     cnt == 32'd50 ||
	     cnt == 32'd51 ||
	     cnt == 32'd52 ||
	     cnt == 32'd53 ||
	     cnt == 32'd54 ||
	     cnt == 32'd55 ;
  assign MUX_rx_valid$write_1__VAL_3 =
	     cnt == 32'd59 || cnt == 32'd60 || cnt == 32'd61 ||
	     cnt == 32'd62 ||
	     cnt == 32'd63 ||
	     cnt == 32'd64 ||
	     cnt == 32'd65 ||
	     cnt == 32'd66 ||
	     cnt == 32'd67 ||
	     cnt == 32'd68 ;
  assign MUX_rx_valid$write_1__VAL_5 =
	     cnt == 32'd0 || cnt == 32'd1 || cnt == 32'd2 || cnt == 32'd3 ||
	     cnt == 32'd4 ||
	     cnt == 32'd5 ||
	     cnt == 32'd6 ||
	     cnt == 32'd7 ||
	     cnt == 32'd8 ||
	     cnt == 32'd9 ;

  // register cnt
  assign cnt$D_IN =
	     MUX_cnt$write_1__SEL_1 ?
	       MUX_cnt$write_1__VAL_1 :
	       MUX_cnt$write_1__VAL_2 ;
  assign cnt$EN =
	     WILL_FIRE_RL_pck4 || WILL_FIRE_RL_pck3 || WILL_FIRE_RL_pck2 ||
	     cnt_SLT_12___d16 ||
	     WILL_FIRE_RL_start ;

  // register rx_data
  always@(MUX_rx_data$write_1__SEL_1 or
	  MUX_rx_data$write_1__VAL_1 or
	  MUX_rx_data$write_1__SEL_2 or
	  MUX_rx_data$write_1__VAL_2 or
	  MUX_rx_data$write_1__SEL_3 or
	  MUX_rx_data$write_1__VAL_3 or
	  MUX_rx_data$write_1__SEL_4 or
	  MUX_rx_data$write_1__SEL_5 or MUX_rx_data$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rx_data$write_1__SEL_1: rx_data$D_IN = MUX_rx_data$write_1__VAL_1;
      MUX_rx_data$write_1__SEL_2: rx_data$D_IN = MUX_rx_data$write_1__VAL_2;
      MUX_rx_data$write_1__SEL_3: rx_data$D_IN = MUX_rx_data$write_1__VAL_3;
      MUX_rx_data$write_1__SEL_4: rx_data$D_IN = 64'h0;
      MUX_rx_data$write_1__SEL_5: rx_data$D_IN = MUX_rx_data$write_1__VAL_5;
      default: rx_data$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rx_data$EN =
	     WILL_FIRE_RL_pck2 &&
	     (cnt == 32'd12 || cnt == 32'd13 || cnt == 32'd14 ||
	      cnt == 32'd15 ||
	      cnt == 32'd16 ||
	      cnt == 32'd17 ||
	      cnt == 32'd18 ||
	      cnt == 32'd19 ||
	      cnt == 32'd20 ||
	      cnt == 32'd21 ||
	      cnt == 32'd22) ||
	     WILL_FIRE_RL_pck3 &&
	     (cnt == 32'd23 || cnt == 32'd24 || cnt == 32'd25 ||
	      cnt == 32'd26 ||
	      cnt == 32'd27 ||
	      cnt == 32'd28 ||
	      cnt == 32'd29 ||
	      cnt == 32'd30 ||
	      cnt == 32'd31 ||
	      cnt == 32'd32 ||
	      cnt == 32'd33 ||
	      cnt == 32'd34 ||
	      cnt == 32'd35 ||
	      cnt == 32'd36 ||
	      cnt == 32'd37 ||
	      cnt == 32'd38 ||
	      cnt == 32'd39 ||
	      cnt == 32'd40 ||
	      cnt == 32'd41 ||
	      cnt == 32'd42 ||
	      cnt == 32'd43 ||
	      cnt == 32'd44 ||
	      cnt == 32'd45 ||
	      cnt == 32'd46 ||
	      cnt == 32'd47 ||
	      cnt == 32'd48 ||
	      cnt == 32'd49 ||
	      cnt == 32'd50 ||
	      cnt == 32'd51 ||
	      cnt == 32'd52 ||
	      cnt == 32'd53 ||
	      cnt == 32'd54 ||
	      cnt == 32'd55 ||
	      cnt == 32'd56 ||
	      cnt == 32'd57 ||
	      cnt == 32'd58) ||
	     WILL_FIRE_RL_pck4 &&
	     (cnt == 32'd59 || cnt == 32'd60 || cnt == 32'd61 ||
	      cnt == 32'd62 ||
	      cnt == 32'd63 ||
	      cnt == 32'd64 ||
	      cnt == 32'd65 ||
	      cnt == 32'd66 ||
	      cnt == 32'd67 ||
	      cnt == 32'd68 ||
	      cnt == 32'd69 ||
	      cnt == 32'd70) ||
	     WILL_FIRE_RL_start && _dfoo1 ||
	     cnt_SLT_12___d16 && _dfoo11 ;

  // register rx_keep
  always@(MUX_rx_data$write_1__SEL_1 or
	  MUX_rx_keep$write_1__VAL_1 or
	  MUX_rx_data$write_1__SEL_2 or
	  MUX_rx_keep$write_1__VAL_2 or
	  MUX_rx_data$write_1__SEL_3 or
	  MUX_rx_keep$write_1__VAL_3 or
	  MUX_rx_keep$write_1__SEL_4 or
	  MUX_rx_keep$write_1__SEL_5 or MUX_rx_keep$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rx_data$write_1__SEL_1: rx_keep$D_IN = MUX_rx_keep$write_1__VAL_1;
      MUX_rx_data$write_1__SEL_2: rx_keep$D_IN = MUX_rx_keep$write_1__VAL_2;
      MUX_rx_data$write_1__SEL_3: rx_keep$D_IN = MUX_rx_keep$write_1__VAL_3;
      MUX_rx_keep$write_1__SEL_4: rx_keep$D_IN = 8'hFF;
      MUX_rx_keep$write_1__SEL_5: rx_keep$D_IN = MUX_rx_keep$write_1__VAL_5;
      default: rx_keep$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign rx_keep$EN =
	     WILL_FIRE_RL_pck2 &&
	     (cnt == 32'd12 || cnt == 32'd13 || cnt == 32'd14 ||
	      cnt == 32'd15 ||
	      cnt == 32'd16 ||
	      cnt == 32'd17 ||
	      cnt == 32'd18 ||
	      cnt == 32'd19 ||
	      cnt == 32'd20 ||
	      cnt == 32'd21 ||
	      cnt == 32'd22) ||
	     WILL_FIRE_RL_pck3 &&
	     (cnt == 32'd23 || cnt == 32'd24 || cnt == 32'd25 ||
	      cnt == 32'd26 ||
	      cnt == 32'd27 ||
	      cnt == 32'd28 ||
	      cnt == 32'd29 ||
	      cnt == 32'd30 ||
	      cnt == 32'd31 ||
	      cnt == 32'd32 ||
	      cnt == 32'd33 ||
	      cnt == 32'd34 ||
	      cnt == 32'd35 ||
	      cnt == 32'd36 ||
	      cnt == 32'd37 ||
	      cnt == 32'd38 ||
	      cnt == 32'd39 ||
	      cnt == 32'd40 ||
	      cnt == 32'd41 ||
	      cnt == 32'd42 ||
	      cnt == 32'd43 ||
	      cnt == 32'd44 ||
	      cnt == 32'd45 ||
	      cnt == 32'd46 ||
	      cnt == 32'd47 ||
	      cnt == 32'd48 ||
	      cnt == 32'd49 ||
	      cnt == 32'd50 ||
	      cnt == 32'd51 ||
	      cnt == 32'd52 ||
	      cnt == 32'd53 ||
	      cnt == 32'd54 ||
	      cnt == 32'd55 ||
	      cnt == 32'd56 ||
	      cnt == 32'd57 ||
	      cnt == 32'd58) ||
	     WILL_FIRE_RL_pck4 &&
	     (cnt == 32'd59 || cnt == 32'd60 || cnt == 32'd61 ||
	      cnt == 32'd62 ||
	      cnt == 32'd63 ||
	      cnt == 32'd64 ||
	      cnt == 32'd65 ||
	      cnt == 32'd66 ||
	      cnt == 32'd67 ||
	      cnt == 32'd68 ||
	      cnt == 32'd69 ||
	      cnt == 32'd70) ||
	     WILL_FIRE_RL_start && _dfoo1 ||
	     cnt_SLT_12___d16 && _dfoo11 ;

  // register rx_last
  always@(MUX_rx_data$write_1__SEL_1 or
	  cnt or
	  MUX_rx_data$write_1__SEL_2 or
	  MUX_rx_data$write_1__SEL_3 or
	  MUX_rx_last$write_1__SEL_4 or MUX_rx_last$write_1__SEL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rx_data$write_1__SEL_1: rx_last$D_IN = cnt == 32'd19;
      MUX_rx_data$write_1__SEL_2: rx_last$D_IN = cnt == 32'd55;
      MUX_rx_data$write_1__SEL_3: rx_last$D_IN = cnt == 32'd68;
      MUX_rx_last$write_1__SEL_4: rx_last$D_IN = 1'b0;
      MUX_rx_last$write_1__SEL_5: rx_last$D_IN = cnt == 32'd9;
      default: rx_last$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rx_last$EN =
	     WILL_FIRE_RL_pck2 &&
	     (cnt == 32'd12 || cnt == 32'd13 || cnt == 32'd14 ||
	      cnt == 32'd15 ||
	      cnt == 32'd16 ||
	      cnt == 32'd17 ||
	      cnt == 32'd18 ||
	      cnt == 32'd19 ||
	      cnt == 32'd20 ||
	      cnt == 32'd21 ||
	      cnt == 32'd22) ||
	     WILL_FIRE_RL_pck3 &&
	     (cnt == 32'd23 || cnt == 32'd24 || cnt == 32'd25 ||
	      cnt == 32'd26 ||
	      cnt == 32'd27 ||
	      cnt == 32'd28 ||
	      cnt == 32'd29 ||
	      cnt == 32'd30 ||
	      cnt == 32'd31 ||
	      cnt == 32'd32 ||
	      cnt == 32'd33 ||
	      cnt == 32'd34 ||
	      cnt == 32'd35 ||
	      cnt == 32'd36 ||
	      cnt == 32'd37 ||
	      cnt == 32'd38 ||
	      cnt == 32'd39 ||
	      cnt == 32'd40 ||
	      cnt == 32'd41 ||
	      cnt == 32'd42 ||
	      cnt == 32'd43 ||
	      cnt == 32'd44 ||
	      cnt == 32'd45 ||
	      cnt == 32'd46 ||
	      cnt == 32'd47 ||
	      cnt == 32'd48 ||
	      cnt == 32'd49 ||
	      cnt == 32'd50 ||
	      cnt == 32'd51 ||
	      cnt == 32'd52 ||
	      cnt == 32'd53 ||
	      cnt == 32'd54 ||
	      cnt == 32'd55 ||
	      cnt == 32'd56 ||
	      cnt == 32'd57 ||
	      cnt == 32'd58) ||
	     WILL_FIRE_RL_pck4 &&
	     (cnt == 32'd59 || cnt == 32'd60 || cnt == 32'd61 ||
	      cnt == 32'd62 ||
	      cnt == 32'd63 ||
	      cnt == 32'd64 ||
	      cnt == 32'd65 ||
	      cnt == 32'd66 ||
	      cnt == 32'd67 ||
	      cnt == 32'd68 ||
	      cnt == 32'd69 ||
	      cnt == 32'd70) ||
	     WILL_FIRE_RL_start && _dfoo1 ||
	     cnt_SLT_12___d16 && _dfoo11 ;

  // register rx_user
  always@(MUX_rx_data$write_1__SEL_1 or
	  cnt or
	  MUX_rx_data$write_1__SEL_2 or
	  MUX_rx_data$write_1__SEL_3 or
	  MUX_rx_user$write_1__SEL_4 or MUX_rx_user$write_1__SEL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rx_data$write_1__SEL_1: rx_user$D_IN = cnt == 32'd19;
      MUX_rx_data$write_1__SEL_2: rx_user$D_IN = cnt == 32'd55;
      MUX_rx_data$write_1__SEL_3: rx_user$D_IN = cnt == 32'd68;
      MUX_rx_user$write_1__SEL_4: rx_user$D_IN = 1'b0;
      MUX_rx_user$write_1__SEL_5: rx_user$D_IN = cnt == 32'd9;
      default: rx_user$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rx_user$EN =
	     WILL_FIRE_RL_pck2 &&
	     (cnt == 32'd12 || cnt == 32'd13 || cnt == 32'd14 ||
	      cnt == 32'd15 ||
	      cnt == 32'd16 ||
	      cnt == 32'd17 ||
	      cnt == 32'd18 ||
	      cnt == 32'd19 ||
	      cnt == 32'd20 ||
	      cnt == 32'd21 ||
	      cnt == 32'd22) ||
	     WILL_FIRE_RL_pck3 &&
	     (cnt == 32'd23 || cnt == 32'd24 || cnt == 32'd25 ||
	      cnt == 32'd26 ||
	      cnt == 32'd27 ||
	      cnt == 32'd28 ||
	      cnt == 32'd29 ||
	      cnt == 32'd30 ||
	      cnt == 32'd31 ||
	      cnt == 32'd32 ||
	      cnt == 32'd33 ||
	      cnt == 32'd34 ||
	      cnt == 32'd35 ||
	      cnt == 32'd36 ||
	      cnt == 32'd37 ||
	      cnt == 32'd38 ||
	      cnt == 32'd39 ||
	      cnt == 32'd40 ||
	      cnt == 32'd41 ||
	      cnt == 32'd42 ||
	      cnt == 32'd43 ||
	      cnt == 32'd44 ||
	      cnt == 32'd45 ||
	      cnt == 32'd46 ||
	      cnt == 32'd47 ||
	      cnt == 32'd48 ||
	      cnt == 32'd49 ||
	      cnt == 32'd50 ||
	      cnt == 32'd51 ||
	      cnt == 32'd52 ||
	      cnt == 32'd53 ||
	      cnt == 32'd54 ||
	      cnt == 32'd55 ||
	      cnt == 32'd56 ||
	      cnt == 32'd57 ||
	      cnt == 32'd58) ||
	     WILL_FIRE_RL_pck4 &&
	     (cnt == 32'd59 || cnt == 32'd60 || cnt == 32'd61 ||
	      cnt == 32'd62 ||
	      cnt == 32'd63 ||
	      cnt == 32'd64 ||
	      cnt == 32'd65 ||
	      cnt == 32'd66 ||
	      cnt == 32'd67 ||
	      cnt == 32'd68 ||
	      cnt == 32'd69 ||
	      cnt == 32'd70) ||
	     WILL_FIRE_RL_start && _dfoo1 ||
	     cnt_SLT_12___d16 && _dfoo11 ;

  // register rx_valid
  always@(MUX_rx_data$write_1__SEL_1 or
	  MUX_rx_valid$write_1__VAL_1 or
	  MUX_rx_data$write_1__SEL_2 or
	  MUX_rx_valid$write_1__VAL_2 or
	  MUX_rx_data$write_1__SEL_3 or
	  MUX_rx_valid$write_1__VAL_3 or
	  MUX_rx_valid$write_1__SEL_4 or
	  MUX_rx_valid$write_1__SEL_5 or MUX_rx_valid$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rx_data$write_1__SEL_1: rx_valid$D_IN = MUX_rx_valid$write_1__VAL_1;
      MUX_rx_data$write_1__SEL_2: rx_valid$D_IN = MUX_rx_valid$write_1__VAL_2;
      MUX_rx_data$write_1__SEL_3: rx_valid$D_IN = MUX_rx_valid$write_1__VAL_3;
      MUX_rx_valid$write_1__SEL_4: rx_valid$D_IN = 1'b0;
      MUX_rx_valid$write_1__SEL_5:
	  rx_valid$D_IN = MUX_rx_valid$write_1__VAL_5;
      default: rx_valid$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rx_valid$EN =
	     WILL_FIRE_RL_pck2 &&
	     (cnt == 32'd12 || cnt == 32'd13 || cnt == 32'd14 ||
	      cnt == 32'd15 ||
	      cnt == 32'd16 ||
	      cnt == 32'd17 ||
	      cnt == 32'd18 ||
	      cnt == 32'd19 ||
	      cnt == 32'd20 ||
	      cnt == 32'd21 ||
	      cnt == 32'd22) ||
	     WILL_FIRE_RL_pck3 &&
	     (cnt == 32'd23 || cnt == 32'd24 || cnt == 32'd25 ||
	      cnt == 32'd26 ||
	      cnt == 32'd27 ||
	      cnt == 32'd28 ||
	      cnt == 32'd29 ||
	      cnt == 32'd30 ||
	      cnt == 32'd31 ||
	      cnt == 32'd32 ||
	      cnt == 32'd33 ||
	      cnt == 32'd34 ||
	      cnt == 32'd35 ||
	      cnt == 32'd36 ||
	      cnt == 32'd37 ||
	      cnt == 32'd38 ||
	      cnt == 32'd39 ||
	      cnt == 32'd40 ||
	      cnt == 32'd41 ||
	      cnt == 32'd42 ||
	      cnt == 32'd43 ||
	      cnt == 32'd44 ||
	      cnt == 32'd45 ||
	      cnt == 32'd46 ||
	      cnt == 32'd47 ||
	      cnt == 32'd48 ||
	      cnt == 32'd49 ||
	      cnt == 32'd50 ||
	      cnt == 32'd51 ||
	      cnt == 32'd52 ||
	      cnt == 32'd53 ||
	      cnt == 32'd54 ||
	      cnt == 32'd55 ||
	      cnt == 32'd56 ||
	      cnt == 32'd57 ||
	      cnt == 32'd58) ||
	     WILL_FIRE_RL_pck4 &&
	     (cnt == 32'd59 || cnt == 32'd60 || cnt == 32'd61 ||
	      cnt == 32'd62 ||
	      cnt == 32'd63 ||
	      cnt == 32'd64 ||
	      cnt == 32'd65 ||
	      cnt == 32'd66 ||
	      cnt == 32'd67 ||
	      cnt == 32'd68 ||
	      cnt == 32'd69 ||
	      cnt == 32'd70) ||
	     WILL_FIRE_RL_start && _dfoo1 ||
	     cnt_SLT_12___d16 && _dfoo11 ;

  // submodule ifc
  assign ifc$mac_rx_data_data = rx_data ;
  assign ifc$mac_rx_keep_keep = rx_keep ;
  assign ifc$mac_rx_last_last = rx_last ;
  assign ifc$mac_rx_user_user = rx_user ;
  assign ifc$mac_rx_valid_valid = rx_valid ;
  assign ifc$mac_tx_ready_ready = 1'b1 ;

  // remaining internal signals
  assign _dfoo1 = cnt == 32'd71 || cnt == 32'd72 ;
  assign _dfoo11 =
	     cnt == 32'd0 || cnt == 32'd1 || cnt == 32'd2 || cnt == 32'd3 ||
	     cnt == 32'd4 ||
	     cnt == 32'd5 ||
	     cnt == 32'd6 ||
	     cnt == 32'd7 ||
	     cnt == 32'd8 ||
	     cnt == 32'd9 ||
	     cnt == 32'd10 ||
	     cnt == 32'd11 ;
  assign cnt_SLT_12___d16 = (cnt ^ 32'h80000000) < 32'h8000000C ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cnt <= `BSV_ASSIGNMENT_DELAY 32'd71;
	rx_data <= `BSV_ASSIGNMENT_DELAY 64'hAAAAAAAAAAAAAAAA;
	rx_keep <= `BSV_ASSIGNMENT_DELAY 8'hFF;
	rx_last <= `BSV_ASSIGNMENT_DELAY 1'b0;
	rx_user <= `BSV_ASSIGNMENT_DELAY 1'b0;
	rx_valid <= `BSV_ASSIGNMENT_DELAY 1'b0;
      end
    else
      begin
        if (cnt$EN) cnt <= `BSV_ASSIGNMENT_DELAY cnt$D_IN;
	if (rx_data$EN) rx_data <= `BSV_ASSIGNMENT_DELAY rx_data$D_IN;
	if (rx_keep$EN) rx_keep <= `BSV_ASSIGNMENT_DELAY rx_keep$D_IN;
	if (rx_last$EN) rx_last <= `BSV_ASSIGNMENT_DELAY rx_last$D_IN;
	if (rx_user$EN) rx_user <= `BSV_ASSIGNMENT_DELAY rx_user$D_IN;
	if (rx_valid$EN) rx_valid <= `BSV_ASSIGNMENT_DELAY rx_valid$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cnt = 32'hAAAAAAAA;
    rx_data = 64'hAAAAAAAAAAAAAAAA;
    rx_keep = 8'hAA;
    rx_last = 1'h0;
    rx_user = 1'h0;
    rx_valid = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkTbIfc

