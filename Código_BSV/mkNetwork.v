//
// Generated by Bluespec Compiler (build 2c1ed34)
//
// On Sun Jun 27 17:15:03 -03 2021
//
//
// Ports:
// Name                         I/O  size props
// mac_tx_data                    O    64 reg
// mac_tx_last                    O     1 reg
// mac_tx_user                    O     1 reg
// mac_tx_valid                   O     1 reg
// mac_tx_keep                    O     8 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// mac_rx_data_data               I    64 reg
// mac_rx_keep_keep               I     8 reg
// mac_rx_valid_valid             I     1 reg
// mac_rx_user_user               I     1 reg
// mac_rx_last_last               I     1 reg
// mac_tx_ready_ready             I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkNetwork(CLK,
		 RST_N,

		 mac_rx_data_data,

		 mac_rx_keep_keep,

		 mac_rx_valid_valid,

		 mac_rx_user_user,

		 mac_rx_last_last,

		 mac_tx_data,

		 mac_tx_last,

		 mac_tx_user,

		 mac_tx_valid,

		 mac_tx_keep,

		 mac_tx_ready_ready);
  input  CLK;
  input  RST_N;

  // action method mac_rx_data
  input  [63 : 0] mac_rx_data_data;

  // action method mac_rx_keep
  input  [7 : 0] mac_rx_keep_keep;

  // action method mac_rx_valid
  input  mac_rx_valid_valid;

  // action method mac_rx_user
  input  mac_rx_user_user;

  // action method mac_rx_last
  input  mac_rx_last_last;

  // value method mac_tx_data
  output [63 : 0] mac_tx_data;

  // value method mac_tx_last
  output mac_tx_last;

  // value method mac_tx_user
  output mac_tx_user;

  // value method mac_tx_valid
  output mac_tx_valid;

  // value method mac_tx_keep
  output [7 : 0] mac_tx_keep;

  // action method mac_tx_ready
  input  mac_tx_ready_ready;

  // signals for module outputs
  wire [63 : 0] mac_tx_data;
  wire [7 : 0] mac_tx_keep;
  wire mac_tx_last, mac_tx_user, mac_tx_valid;

  // inlined wires
  wire start_wire$whas,
       start_wire_1$whas,
       state_1_set_pw$whas,
       state_set_pw$whas;

  // register check
  reg check;
  wire check$D_IN, check$EN;

  // register data
  reg [63 : 0] data;
  wire [63 : 0] data$D_IN;
  wire data$EN;

  // register error
  reg error;
  wire error$D_IN, error$EN;

  // register eth_topheader
  reg [15 : 0] eth_topheader;
  wire [15 : 0] eth_topheader$D_IN;
  wire eth_topheader$EN;

  // register finish
  reg finish;
  wire finish$D_IN, finish$EN;

  // register i
  reg [31 : 0] i;
  wire [31 : 0] i$D_IN;
  wire i$EN;

  // register ip4_checksum
  reg [15 : 0] ip4_checksum;
  wire [15 : 0] ip4_checksum$D_IN;
  wire ip4_checksum$EN;

  // register ipodd_topheader
  reg [47 : 0] ipodd_topheader;
  wire [47 : 0] ipodd_topheader$D_IN;
  wire ipodd_topheader$EN;

  // register ippair_topheader
  reg [15 : 0] ippair_topheader;
  wire [15 : 0] ippair_topheader$D_IN;
  wire ippair_topheader$EN;

  // register keep
  reg [7 : 0] keep;
  wire [7 : 0] keep$D_IN;
  wire keep$EN;

  // register last
  reg last;
  wire last$D_IN, last$EN;

  // register pseudo_header
  reg [15 : 0] pseudo_header;
  wire [15 : 0] pseudo_header$D_IN;
  wire pseudo_header$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register running_1
  reg running_1;
  wire running_1$D_IN, running_1$EN;

  // register rx_data
  reg [63 : 0] rx_data;
  wire [63 : 0] rx_data$D_IN;
  wire rx_data$EN;

  // register rx_keep
  reg [7 : 0] rx_keep;
  wire [7 : 0] rx_keep$D_IN;
  wire rx_keep$EN;

  // register rx_last
  reg rx_last;
  wire rx_last$D_IN, rx_last$EN;

  // register rx_user
  reg rx_user;
  wire rx_user$D_IN, rx_user$EN;

  // register rx_valid
  reg rx_valid;
  wire rx_valid$D_IN, rx_valid$EN;

  // register start
  reg start;
  wire start$D_IN, start$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register start_reg_1_1
  reg start_reg_1_1;
  wire start_reg_1_1$D_IN, start_reg_1_1$EN;

  // register start_reg_1_2
  reg start_reg_1_2;
  wire start_reg_1_2$D_IN, start_reg_1_2$EN;

  // register state_1_can_overlap
  reg state_1_can_overlap;
  wire state_1_can_overlap$D_IN, state_1_can_overlap$EN;

  // register state_1_fired
  reg state_1_fired;
  wire state_1_fired$D_IN, state_1_fired$EN;

  // register state_1_mkFSMstate
  reg [2 : 0] state_1_mkFSMstate;
  wire [2 : 0] state_1_mkFSMstate$D_IN;
  wire state_1_mkFSMstate$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [3 : 0] state_mkFSMstate;
  reg [3 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // register tcp_checksum
  reg [15 : 0] tcp_checksum;
  reg [15 : 0] tcp_checksum$D_IN;
  wire tcp_checksum$EN;

  // register tx_data
  reg [63 : 0] tx_data;
  wire [63 : 0] tx_data$D_IN;
  wire tx_data$EN;

  // register tx_keep
  reg [7 : 0] tx_keep;
  wire [7 : 0] tx_keep$D_IN;
  wire tx_keep$EN;

  // register tx_last
  reg tx_last;
  wire tx_last$D_IN, tx_last$EN;

  // register tx_ready
  reg tx_ready;
  wire tx_ready$D_IN, tx_ready$EN;

  // register tx_user
  reg tx_user;
  wire tx_user$D_IN, tx_user$EN;

  // register tx_valid
  reg tx_valid;
  wire tx_valid$D_IN, tx_valid$EN;

  // register valid
  reg valid;
  wire valid$D_IN, valid$EN;

  // ports of submodule eth
  wire [111 : 0] eth$parser_d;
  wire [15 : 0] eth$ethType;
  wire eth$EN_activate, eth$EN_parser, eth$activate_v;

  // ports of submodule filter
  wire [293 : 0] filter$fifoToCheck_v;
  wire [72 : 0] filter$fifoToFilter_d, filter$getToSend;
  wire filter$EN_fifoToCheck,
       filter$EN_fifoToFilter,
       filter$EN_getToSend,
       filter$RDY_fifoToCheck,
       filter$RDY_fifoToFilter,
       filter$RDY_getToSend,
       filter$validSend;

  // ports of submodule ip
  wire [127 : 0] ip$ip6Dst, ip$ip6Src;
  wire [63 : 0] ip$parser_d;
  wire [31 : 0] ip$ip4Dst, ip$ip4Src;
  wire [15 : 0] ip$length, ip$versionIHL_v;
  wire [7 : 0] ip$nextProtocol;
  wire [3 : 0] ip$version;
  wire ip$EN_activate, ip$EN_parser, ip$EN_versionIHL, ip$activate_v;

  // ports of submodule tcp
  wire [63 : 0] tcp$parser_d;
  wire [47 : 0] tcp$headerOdd_odd;
  wire [15 : 0] tcp$headerPair_pair, tcp$portDst, tcp$portSrc;
  wire tcp$EN_activate,
       tcp$EN_headerOdd,
       tcp$EN_headerPair,
       tcp$EN_pairOrodd,
       tcp$EN_parser,
       tcp$activate_v,
       tcp$pairOrodd_signal;

  // rule scheduling signals
  wire WILL_FIRE_RL_action_l175c25,
       WILL_FIRE_RL_action_l264c41,
       WILL_FIRE_RL_action_l281c49,
       WILL_FIRE_RL_action_l320c65,
       WILL_FIRE_RL_action_l361c65,
       WILL_FIRE_RL_action_l370c65,
       WILL_FIRE_RL_action_l390c73,
       WILL_FIRE_RL_action_l392c65,
       WILL_FIRE_RL_action_l406c57,
       WILL_FIRE_RL_action_l408c49,
       WILL_FIRE_RL_action_l435c33,
       WILL_FIRE_RL_action_l453c41,
       WILL_FIRE_RL_fifoCheck,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_fsm_start_1,
       WILL_FIRE_RL_pkgLast,
       WILL_FIRE_RL_pkgStart;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_i$write_1__VAL_1, MUX_i$write_1__VAL_2;
  wire [15 : 0] MUX_ip4_checksum$write_1__VAL_1,
		MUX_ip4_checksum$write_1__VAL_2,
		MUX_tcp_checksum$write_1__VAL_1,
		MUX_tcp_checksum$write_1__VAL_2,
		MUX_tcp_checksum$write_1__VAL_3;
  wire MUX_ip$activate_1__SEL_1,
       MUX_start_reg$write_1__SEL_2,
       MUX_start_reg_1_1$write_1__SEL_2,
       MUX_tcp_checksum$write_1__SEL_1;

  // remaining internal signals
  wire [293 : 0] IF_eth_ethType__9_EQ_0x86DD_7_AND_ip_nextProto_ETC___d63,
		 v__h2767,
		 v__h2787;
  wire [31 : 0] x__h58095, x__h58118, x__h60470;
  wire [16 : 0] _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d155,
		_0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d197,
		_0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d252,
		_0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d277,
		_0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d310,
		_0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d521,
		_0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d149,
		_0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d190,
		_0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d246,
		_0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d271,
		_0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d304,
		_0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d515,
		_0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d143,
		_0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d184,
		_0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d240,
		_0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d265,
		_0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d298,
		_0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d509,
		_0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d137,
		_0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d178,
		_0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d234,
		_0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d259,
		_0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d292,
		_0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d503,
		_0_CONCAT_ip_ip4Dst__0_BITS_15_TO_0_18_19_PLUS__ETC___d338,
		_0_CONCAT_ip_ip4Dst__0_BITS_31_TO_16_20_21_PLUS_ETC___d332,
		_0_CONCAT_ip_ip4Src__1_BITS_15_TO_0_22_23_PLUS__ETC___d326,
		_0_CONCAT_ip_ip6Dst__1_BITS_111_TO_96_67_68_PLU_ETC___d435,
		_0_CONCAT_ip_ip6Dst__1_BITS_127_TO_112_69_70_PL_ETC___d429,
		_0_CONCAT_ip_ip6Dst__1_BITS_15_TO_0_55_56_PLUS__ETC___d471,
		_0_CONCAT_ip_ip6Dst__1_BITS_31_TO_16_57_58_PLUS_ETC___d465,
		_0_CONCAT_ip_ip6Dst__1_BITS_47_TO_32_59_60_PLUS_ETC___d459,
		_0_CONCAT_ip_ip6Dst__1_BITS_63_TO_48_61_62_PLUS_ETC___d453,
		_0_CONCAT_ip_ip6Dst__1_BITS_79_TO_64_63_64_PLUS_ETC___d447,
		_0_CONCAT_ip_ip6Dst__1_BITS_95_TO_80_65_66_PLUS_ETC___d441,
		_0_CONCAT_ip_ip6Src__2_BITS_111_TO_96_83_84_PLU_ETC___d387,
		_0_CONCAT_ip_ip6Src__2_BITS_15_TO_0_71_72_PLUS__ETC___d423,
		_0_CONCAT_ip_ip6Src__2_BITS_31_TO_16_73_74_PLUS_ETC___d417,
		_0_CONCAT_ip_ip6Src__2_BITS_47_TO_32_75_76_PLUS_ETC___d411,
		_0_CONCAT_ip_ip6Src__2_BITS_63_TO_48_77_78_PLUS_ETC___d405,
		_0_CONCAT_ip_ip6Src__2_BITS_79_TO_64_79_80_PLUS_ETC___d399,
		_0_CONCAT_ip_ip6Src__2_BITS_95_TO_80_81_82_PLUS_ETC___d393,
		_0_CONCAT_ip_length__15_16_PLUS_0_CONCAT_IF_0_C_ETC___d350,
		_0_CONCAT_ip_length__15_16_PLUS_0_CONCAT_IF_0_C_ETC___d477,
		_0_CONCAT_ip_nextProtocol__1_17_PLUS_0_CONCAT_I_ETC___d344,
		_0_CONCAT_ip_nextProtocol__1_17_PLUS_0_CONCAT_I_ETC___d483,
		_0_CONCAT_ipodd_topheader_15_BITS_15_TO_0_16_17_ETC___d228,
		_0_CONCAT_ipodd_topheader_15_BITS_31_TO_16_18_1_ETC___d222,
		_0_CONCAT_pseudo_header_95_96_PLUS_0_CONCAT_tcp_ETC___d497;
  wire [15 : 0] checksum__h57753,
		checksum__h57839,
		checksum__h57925,
		checksum__h58011,
		checksum__h59166,
		checksum__h59795,
		checksum__h60157,
		checksum__h60243,
		checksum__h60329,
		checksum__h60415,
		checksum__h61557,
		checksum__h61643,
		checksum__h61729,
		checksum__h61815,
		checksum__h62372,
		checksum__h62458,
		checksum__h62544,
		checksum__h62630,
		checksum__h62716,
		checksum__h62802,
		checksum__h63932,
		checksum__h64018,
		checksum__h64104,
		checksum__h64190,
		checksum__h64554,
		checksum__h64640,
		checksum__h64726,
		checksum__h64812,
		checksum__h64898,
		checksum__h65914,
		checksum__h66000,
		checksum__h66086,
		checksum__h66172,
		checksum__h66258,
		checksum__h66344,
		checksum__h66430,
		checksum__h66516,
		checksum__h66602,
		checksum__h66688,
		checksum__h66774,
		checksum__h66860,
		checksum__h66946,
		checksum__h67032,
		checksum__h67118,
		checksum__h67225,
		checksum__h67290,
		checksum__h67397,
		checksum__h67462,
		checksum__h69924,
		checksum__h70010,
		checksum__h70096,
		checksum__h70182,
		checksum__h70268,
		x__h57816,
		x__h57902,
		x__h57988,
		x__h59891,
		x__h60306,
		x__h60988,
		x__h61620,
		x__h61706,
		x__h61792,
		x__h61921,
		x__h62435,
		x__h62521,
		x__h62607,
		x__h62693,
		x__h62779,
		x__h63995,
		x__h64081,
		x__h64167,
		x__h64253,
		x__h64617,
		x__h64703,
		x__h64789,
		x__h64875,
		x__h64946,
		x__h65977,
		x__h66063,
		x__h66149,
		x__h66235,
		x__h66321,
		x__h66407,
		x__h66493,
		x__h66579,
		x__h66665,
		x__h66751,
		x__h66837,
		x__h66923,
		x__h67009,
		x__h67095,
		x__h69987,
		x__h70073,
		x__h70159,
		x__h70245;
  wire NOT_ip_nextProtocol__1_EQ_0x6_2_26_OR_NOT_ip_v_ETC___d533,
       NOT_ip_nextProtocol__1_EQ_0x6_2_26_OR_NOT_ip_v_ETC___d541,
       abort_1_whas__77_AND_abort_1_wget__78_79_OR_st_ETC___d638,
       abort_whas__3_AND_abort_wget__4_5_OR_state_mkF_ETC___d565,
       eth_topheader_20_BITS_11_TO_8_21_ULT_5___d122,
       i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288,
       i_65_ULE_8___d173,
       ip_nextProtocol__1_EQ_0x6_2_AND_ip_version__4__ETC___d212,
       ip_nextProtocol__1_EQ_0x6_2_AND_ip_version__4__ETC___d283;

  // value method mac_tx_data
  assign mac_tx_data = tx_data ;

  // value method mac_tx_last
  assign mac_tx_last = tx_last ;

  // value method mac_tx_user
  assign mac_tx_user = tx_user ;

  // value method mac_tx_valid
  assign mac_tx_valid = tx_valid ;

  // value method mac_tx_keep
  assign mac_tx_keep = tx_keep ;

  // submodule eth
  mkEthernet eth(.CLK(CLK),
		 .RST_N(RST_N),
		 .activate_v(eth$activate_v),
		 .parser_d(eth$parser_d),
		 .EN_parser(eth$EN_parser),
		 .EN_activate(eth$EN_activate),
		 .RDY_parser(),
		 .RDY_activate(),
		 .macDst(),
		 .RDY_macDst(),
		 .macSrc(),
		 .RDY_macSrc(),
		 .ethType(eth$ethType),
		 .RDY_ethType());

  // submodule filter
  mkFilter filter(.CLK(CLK),
		  .RST_N(RST_N),
		  .fifoToCheck_v(filter$fifoToCheck_v),
		  .fifoToFilter_d(filter$fifoToFilter_d),
		  .EN_fifoToCheck(filter$EN_fifoToCheck),
		  .EN_fifoToFilter(filter$EN_fifoToFilter),
		  .EN_getToSend(filter$EN_getToSend),
		  .RDY_fifoToCheck(filter$RDY_fifoToCheck),
		  .RDY_fifoToFilter(filter$RDY_fifoToFilter),
		  .validSend(filter$validSend),
		  .RDY_validSend(),
		  .getToSend(filter$getToSend),
		  .RDY_getToSend(filter$RDY_getToSend));

  // submodule ip
  mkIP ip(.CLK(CLK),
	  .RST_N(RST_N),
	  .activate_v(ip$activate_v),
	  .parser_d(ip$parser_d),
	  .versionIHL_v(ip$versionIHL_v),
	  .EN_activate(ip$EN_activate),
	  .EN_parser(ip$EN_parser),
	  .EN_versionIHL(ip$EN_versionIHL),
	  .RDY_activate(),
	  .RDY_parser(),
	  .RDY_versionIHL(),
	  .version(ip$version),
	  .RDY_version(),
	  .length(ip$length),
	  .RDY_length(),
	  .nextProtocol(ip$nextProtocol),
	  .RDY_nextProtocol(),
	  .ip4Src(ip$ip4Src),
	  .RDY_ip4Src(),
	  .ip4Dst(ip$ip4Dst),
	  .RDY_ip4Dst(),
	  .validChecksum(),
	  .RDY_validChecksum(),
	  .ip6Src(ip$ip6Src),
	  .RDY_ip6Src(),
	  .ip6Dst(ip$ip6Dst),
	  .RDY_ip6Dst());

  // submodule tcp
  mkTCP tcp(.CLK(CLK),
	    .RST_N(RST_N),
	    .activate_v(tcp$activate_v),
	    .headerOdd_odd(tcp$headerOdd_odd),
	    .headerPair_pair(tcp$headerPair_pair),
	    .pairOrodd_signal(tcp$pairOrodd_signal),
	    .parser_d(tcp$parser_d),
	    .EN_activate(tcp$EN_activate),
	    .EN_parser(tcp$EN_parser),
	    .EN_pairOrodd(tcp$EN_pairOrodd),
	    .EN_headerPair(tcp$EN_headerPair),
	    .EN_headerOdd(tcp$EN_headerOdd),
	    .RDY_activate(),
	    .RDY_parser(),
	    .RDY_pairOrodd(),
	    .RDY_headerPair(),
	    .RDY_headerOdd(),
	    .portSrc(tcp$portSrc),
	    .RDY_portSrc(),
	    .portDst(tcp$portDst),
	    .RDY_portDst());

  // rule RL_fsm_start
  assign WILL_FIRE_RL_fsm_start =
	     abort_whas__3_AND_abort_wget__4_5_OR_state_mkF_ETC___d565 &&
	     start_reg ;

  // rule RL_action_l390c73
  assign WILL_FIRE_RL_action_l390c73 =
	     i == 32'd0 &&
	     NOT_ip_nextProtocol__1_EQ_0x6_2_26_OR_NOT_ip_v_ETC___d533 &&
	     (state_mkFSMstate == 4'd3 || state_mkFSMstate == 4'd4) ||
	     !last && state_mkFSMstate == 4'd9 ;

  // rule RL_action_l392c65
  assign WILL_FIRE_RL_action_l392c65 =
	     i == 32'd0 &&
	     NOT_ip_nextProtocol__1_EQ_0x6_2_26_OR_NOT_ip_v_ETC___d541 &&
	     (state_mkFSMstate == 4'd3 || state_mkFSMstate == 4'd4) ||
	     last && state_mkFSMstate == 4'd9 ;

  // rule RL_action_l406c57
  assign WILL_FIRE_RL_action_l406c57 =
	     (eth$ethType != 16'h0800 ||
	      eth_topheader_20_BITS_11_TO_8_21_ULT_5___d122) &&
	     eth$ethType != 16'h86DD &&
	     !last &&
	     state_mkFSMstate == 4'd2 ||
	     !last && state_mkFSMstate == 4'd11 ;

  // rule RL_action_l408c49
  assign WILL_FIRE_RL_action_l408c49 =
	     (eth$ethType != 16'h0800 ||
	      eth_topheader_20_BITS_11_TO_8_21_ULT_5___d122) &&
	     eth$ethType != 16'h86DD &&
	     last &&
	     state_mkFSMstate == 4'd2 ||
	     last && state_mkFSMstate == 4'd11 ;

  // rule RL_fsm_start_1
  assign WILL_FIRE_RL_fsm_start_1 =
	     abort_1_whas__77_AND_abort_1_wget__78_79_OR_st_ETC___d638 &&
	     start_reg_1_1 ;

  // rule RL_action_l435c33
  assign WILL_FIRE_RL_action_l435c33 =
	     filter$RDY_getToSend && filter$validSend &&
	     (tx_ready && start_wire_1$whas && state_1_mkFSMstate == 3'd0 ||
	      tx_ready && state_1_mkFSMstate == 3'd1 ||
	      tx_ready && state_1_mkFSMstate == 3'd2) ;

  // rule RL_fifoCheck
  assign WILL_FIRE_RL_fifoCheck = filter$RDY_fifoToCheck && finish && check ;

  // rule RL_action_l320c65
  assign WILL_FIRE_RL_action_l320c65 =
	     i == 32'd0 &&
	     ip_nextProtocol__1_EQ_0x6_2_AND_ip_version__4__ETC___d212 &&
	     (state_mkFSMstate == 4'd3 || state_mkFSMstate == 4'd4) ;

  // rule RL_action_l264c41
  assign WILL_FIRE_RL_action_l264c41 =
	     (eth$ethType == 16'h0800 &&
	      !eth_topheader_20_BITS_11_TO_8_21_ULT_5___d122 ||
	      eth$ethType == 16'h86DD) &&
	     state_mkFSMstate == 4'd2 ;

  // rule RL_action_l175c25
  assign WILL_FIRE_RL_action_l175c25 =
	     start &&
	     (start_wire$whas && state_mkFSMstate == 4'd0 ||
	      state_mkFSMstate == 4'd8 ||
	      state_mkFSMstate == 4'd10 ||
	      state_mkFSMstate == 4'd12) ;

  // rule RL_pkgStart
  assign WILL_FIRE_RL_pkgStart = rx_valid && !rx_last ;

  // rule RL_pkgLast
  assign WILL_FIRE_RL_pkgLast = !finish && rx_last ;

  // rule RL_action_l281c49
  assign WILL_FIRE_RL_action_l281c49 =
	     i != 32'd0 &&
	     (state_mkFSMstate == 4'd3 || state_mkFSMstate == 4'd4) ;

  // rule RL_action_l361c65
  assign WILL_FIRE_RL_action_l361c65 =
	     !last && (state_mkFSMstate == 4'd6 || state_mkFSMstate == 4'd7) ;

  // rule RL_action_l370c65
  assign WILL_FIRE_RL_action_l370c65 =
	     last && (state_mkFSMstate == 4'd6 || state_mkFSMstate == 4'd7) ;

  // rule RL_action_l453c41
  assign WILL_FIRE_RL_action_l453c41 =
	     !tx_ready && start_wire_1$whas && state_1_mkFSMstate == 3'd0 ||
	     !tx_ready && state_1_mkFSMstate == 3'd1 ||
	     !tx_ready && state_1_mkFSMstate == 3'd2 ;

  // inputs to muxes for submodule ports
  assign MUX_ip$activate_1__SEL_1 =
	     WILL_FIRE_RL_action_l281c49 && i_65_ULE_8___d173 ;
  assign MUX_start_reg$write_1__SEL_2 =
	     abort_whas__3_AND_abort_wget__4_5_OR_state_mkF_ETC___d565 &&
	     !start_reg &&
	     !running ;
  assign MUX_start_reg_1_1$write_1__SEL_2 =
	     abort_1_whas__77_AND_abort_1_wget__78_79_OR_st_ETC___d638 &&
	     !start_reg_1_1 &&
	     !running_1 ;
  assign MUX_tcp_checksum$write_1__SEL_1 =
	     WILL_FIRE_RL_action_l361c65 ||
	     i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288 ;
  assign MUX_i$write_1__VAL_1 =
	     (eth_topheader[15:12] == 4'd4) ? x__h58095 : 32'd32 ;
  assign MUX_i$write_1__VAL_2 = i_65_ULE_8___d173 ? 32'd0 : x__h60470 ;
  assign MUX_ip4_checksum$write_1__VAL_1 =
	     _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d155[16] ?
	       checksum__h58011 :
	       _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d155[15:0] ;
  assign MUX_ip4_checksum$write_1__VAL_2 =
	     i_65_ULE_8___d173 ?
	       (eth_topheader[8] ? checksum__h59795 : checksum__h59166) :
	       x__h59891 ;
  assign MUX_tcp_checksum$write_1__VAL_1 =
	     _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d310[16] ?
	       checksum__h64190 :
	       _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d310[15:0] ;
  assign MUX_tcp_checksum$write_1__VAL_2 =
	     _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d521[16] ?
	       checksum__h70268 :
	       _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d521[15:0] ;
  assign MUX_tcp_checksum$write_1__VAL_3 =
	     eth_topheader[8] ? x__h61921 : x__h60988 ;

  // inlined wires
  assign start_wire$whas =
	     start_reg_1 && !state_fired || WILL_FIRE_RL_fsm_start ;
  assign start_wire_1$whas =
	     WILL_FIRE_RL_fsm_start_1 || start_reg_1_2 && !state_1_fired ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_action_l408c49 || WILL_FIRE_RL_action_l406c57 ||
	     WILL_FIRE_RL_action_l392c65 ||
	     WILL_FIRE_RL_action_l390c73 ||
	     WILL_FIRE_RL_action_l370c65 ||
	     WILL_FIRE_RL_action_l361c65 ||
	     i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288 ||
	     WILL_FIRE_RL_action_l320c65 ||
	     WILL_FIRE_RL_action_l281c49 ||
	     WILL_FIRE_RL_action_l264c41 ||
	     state_mkFSMstate == 4'd1 ||
	     WILL_FIRE_RL_action_l175c25 ;
  assign state_1_set_pw$whas =
	     WILL_FIRE_RL_action_l453c41 || WILL_FIRE_RL_action_l435c33 ;

  // register check
  assign check$D_IN = !WILL_FIRE_RL_fifoCheck ;
  assign check$EN = WILL_FIRE_RL_fifoCheck || WILL_FIRE_RL_pkgLast ;

  // register data
  assign data$D_IN =
	     { rx_data[7:0],
	       rx_data[15:8],
	       rx_data[23:16],
	       rx_data[31:24],
	       rx_data[39:32],
	       rx_data[47:40],
	       rx_data[55:48],
	       rx_data[63:56] } ;
  assign data$EN = rx_valid ;

  // register error
  assign error$D_IN = start && (keep != 8'hFF || !valid) ;
  assign error$EN = 1'd1 ;

  // register eth_topheader
  assign eth_topheader$D_IN = data[15:0] ;
  assign eth_topheader$EN = state_mkFSMstate == 4'd1 ;

  // register finish
  assign finish$D_IN = !WILL_FIRE_RL_pkgStart ;
  assign finish$EN = WILL_FIRE_RL_pkgStart || WILL_FIRE_RL_pkgLast ;

  // register i
  assign i$D_IN =
	     WILL_FIRE_RL_action_l264c41 ?
	       MUX_i$write_1__VAL_1 :
	       MUX_i$write_1__VAL_2 ;
  assign i$EN = WILL_FIRE_RL_action_l264c41 || WILL_FIRE_RL_action_l281c49 ;

  // register ip4_checksum
  assign ip4_checksum$D_IN =
	     WILL_FIRE_RL_action_l264c41 ?
	       MUX_ip4_checksum$write_1__VAL_1 :
	       MUX_ip4_checksum$write_1__VAL_2 ;
  assign ip4_checksum$EN =
	     WILL_FIRE_RL_action_l264c41 || WILL_FIRE_RL_action_l281c49 ;

  // register ipodd_topheader
  assign ipodd_topheader$D_IN = data[47:0] ;
  assign ipodd_topheader$EN =
	     WILL_FIRE_RL_action_l281c49 && i_65_ULE_8___d173 &&
	     eth_topheader[8] ;

  // register ippair_topheader
  assign ippair_topheader$D_IN = data[15:0] ;
  assign ippair_topheader$EN =
	     WILL_FIRE_RL_action_l281c49 && i_65_ULE_8___d173 &&
	     !eth_topheader[8] ;

  // register keep
  assign keep$D_IN = rx_keep ;
  assign keep$EN = rx_valid ;

  // register last
  assign last$D_IN = rx_last ;
  assign last$EN = rx_valid ;

  // register pseudo_header
  assign pseudo_header$D_IN = (ip$version == 4'd4) ? x__h64253 : x__h64946 ;
  assign pseudo_header$EN =
	     i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = MUX_start_reg$write_1__SEL_2 ;

  // register running_1
  assign running_1$D_IN = 1'd1 ;
  assign running_1$EN = MUX_start_reg_1_1$write_1__SEL_2 ;

  // register rx_data
  assign rx_data$D_IN = mac_rx_data_data ;
  assign rx_data$EN = 1'd1 ;

  // register rx_keep
  assign rx_keep$D_IN = mac_rx_keep_keep ;
  assign rx_keep$EN = 1'd1 ;

  // register rx_last
  assign rx_last$D_IN = mac_rx_last_last ;
  assign rx_last$EN = 1'd1 ;

  // register rx_user
  assign rx_user$D_IN = mac_rx_user_user ;
  assign rx_user$EN = 1'd1 ;

  // register rx_valid
  assign rx_valid$D_IN = mac_rx_valid_valid ;
  assign rx_valid$EN = 1'd1 ;

  // register start
  assign start$D_IN = !WILL_FIRE_RL_pkgLast ;
  assign start$EN = WILL_FIRE_RL_pkgLast || WILL_FIRE_RL_pkgStart ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN =
	     WILL_FIRE_RL_fsm_start ||
	     abort_whas__3_AND_abort_wget__4_5_OR_state_mkF_ETC___d565 &&
	     !start_reg &&
	     !running ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register start_reg_1_1
  assign start_reg_1_1$D_IN = !WILL_FIRE_RL_fsm_start_1 ;
  assign start_reg_1_1$EN =
	     WILL_FIRE_RL_fsm_start_1 ||
	     abort_1_whas__77_AND_abort_1_wget__78_79_OR_st_ETC___d638 &&
	     !start_reg_1_1 &&
	     !running_1 ;

  // register start_reg_1_2
  assign start_reg_1_2$D_IN = start_wire_1$whas ;
  assign start_reg_1_2$EN = 1'd1 ;

  // register state_1_can_overlap
  assign state_1_can_overlap$D_IN =
	     state_1_set_pw$whas || state_1_can_overlap ;
  assign state_1_can_overlap$EN = 1'd1 ;

  // register state_1_fired
  assign state_1_fired$D_IN = state_1_set_pw$whas ;
  assign state_1_fired$EN = 1'd1 ;

  // register state_1_mkFSMstate
  assign state_1_mkFSMstate$D_IN = WILL_FIRE_RL_action_l435c33 ? 3'd1 : 3'd2 ;
  assign state_1_mkFSMstate$EN =
	     WILL_FIRE_RL_action_l435c33 || WILL_FIRE_RL_action_l453c41 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(WILL_FIRE_RL_action_l175c25 or
	  state_mkFSMstate or
	  WILL_FIRE_RL_action_l264c41 or
	  WILL_FIRE_RL_action_l281c49 or
	  WILL_FIRE_RL_action_l320c65 or
	  i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288 or
	  WILL_FIRE_RL_action_l361c65 or
	  WILL_FIRE_RL_action_l370c65 or
	  WILL_FIRE_RL_action_l390c73 or
	  WILL_FIRE_RL_action_l392c65 or
	  WILL_FIRE_RL_action_l406c57 or WILL_FIRE_RL_action_l408c49)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_action_l175c25: state_mkFSMstate$D_IN = 4'd1;
      state_mkFSMstate == 4'd1: state_mkFSMstate$D_IN = 4'd2;
      WILL_FIRE_RL_action_l264c41: state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_action_l281c49: state_mkFSMstate$D_IN = 4'd4;
      WILL_FIRE_RL_action_l320c65: state_mkFSMstate$D_IN = 4'd5;
      i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288:
	  state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_action_l361c65: state_mkFSMstate$D_IN = 4'd7;
      WILL_FIRE_RL_action_l370c65: state_mkFSMstate$D_IN = 4'd8;
      WILL_FIRE_RL_action_l390c73: state_mkFSMstate$D_IN = 4'd9;
      WILL_FIRE_RL_action_l392c65: state_mkFSMstate$D_IN = 4'd10;
      WILL_FIRE_RL_action_l406c57: state_mkFSMstate$D_IN = 4'd11;
      WILL_FIRE_RL_action_l408c49: state_mkFSMstate$D_IN = 4'd12;
      default: state_mkFSMstate$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_action_l175c25 || state_mkFSMstate == 4'd1 ||
	     WILL_FIRE_RL_action_l264c41 ||
	     WILL_FIRE_RL_action_l281c49 ||
	     WILL_FIRE_RL_action_l320c65 ||
	     i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288 ||
	     WILL_FIRE_RL_action_l361c65 ||
	     WILL_FIRE_RL_action_l370c65 ||
	     WILL_FIRE_RL_action_l390c73 ||
	     WILL_FIRE_RL_action_l392c65 ||
	     WILL_FIRE_RL_action_l406c57 ||
	     WILL_FIRE_RL_action_l408c49 ;

  // register tcp_checksum
  always@(MUX_tcp_checksum$write_1__SEL_1 or
	  MUX_tcp_checksum$write_1__VAL_1 or
	  WILL_FIRE_RL_action_l370c65 or
	  MUX_tcp_checksum$write_1__VAL_2 or
	  WILL_FIRE_RL_action_l320c65 or MUX_tcp_checksum$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tcp_checksum$write_1__SEL_1:
	  tcp_checksum$D_IN = MUX_tcp_checksum$write_1__VAL_1;
      WILL_FIRE_RL_action_l370c65:
	  tcp_checksum$D_IN = MUX_tcp_checksum$write_1__VAL_2;
      WILL_FIRE_RL_action_l320c65:
	  tcp_checksum$D_IN = MUX_tcp_checksum$write_1__VAL_3;
      default: tcp_checksum$D_IN =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  assign tcp_checksum$EN =
	     WILL_FIRE_RL_action_l361c65 ||
	     i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288 ||
	     WILL_FIRE_RL_action_l370c65 ||
	     WILL_FIRE_RL_action_l320c65 ;

  // register tx_data
  assign tx_data$D_IN = filter$getToSend[63:0] ;
  assign tx_data$EN = WILL_FIRE_RL_action_l435c33 ;

  // register tx_keep
  assign tx_keep$D_IN = filter$getToSend[71:64] ;
  assign tx_keep$EN = WILL_FIRE_RL_action_l435c33 ;

  // register tx_last
  assign tx_last$D_IN = filter$getToSend[72] ;
  assign tx_last$EN = WILL_FIRE_RL_action_l435c33 ;

  // register tx_ready
  assign tx_ready$D_IN = mac_tx_ready_ready ;
  assign tx_ready$EN = 1'd1 ;

  // register tx_user
  assign tx_user$D_IN = 1'b0 ;
  assign tx_user$EN = WILL_FIRE_RL_action_l435c33 ;

  // register tx_valid
  assign tx_valid$D_IN = 1'b1 ;
  assign tx_valid$EN = WILL_FIRE_RL_action_l435c33 ;

  // register valid
  assign valid$D_IN = rx_valid ;
  assign valid$EN = rx_valid ;

  // submodule eth
  assign eth$activate_v = state_mkFSMstate != 4'd1 ;
  assign eth$parser_d =
	     { data,
	       rx_data[7:0],
	       rx_data[15:8],
	       rx_data[23:16],
	       rx_data[31:24],
	       rx_data[39:32],
	       rx_data[47:40] } ;
  assign eth$EN_parser = WILL_FIRE_RL_action_l175c25 ;
  assign eth$EN_activate =
	     state_mkFSMstate == 4'd1 || WILL_FIRE_RL_action_l175c25 ;

  // submodule filter
  assign filter$fifoToCheck_v =
	     (eth$ethType == 16'h0800 && ip$nextProtocol == 8'h06 &&
	      ip$version == 4'd4 &&
	      ip4_checksum == 16'hFFFF) ?
	       v__h2767 :
	       IF_eth_ethType__9_EQ_0x86DD_7_AND_ip_nextProto_ETC___d63 ;
  assign filter$fifoToFilter_d = { rx_last, rx_keep, rx_data } ;
  assign filter$EN_fifoToCheck = WILL_FIRE_RL_fifoCheck ;
  assign filter$EN_fifoToFilter = filter$RDY_fifoToFilter && rx_valid ;
  assign filter$EN_getToSend = WILL_FIRE_RL_action_l435c33 ;

  // submodule ip
  assign ip$activate_v = !MUX_ip$activate_1__SEL_1 ;
  assign ip$parser_d = data ;
  assign ip$versionIHL_v = eth_topheader ;
  assign ip$EN_activate =
	     WILL_FIRE_RL_action_l281c49 && i_65_ULE_8___d173 ||
	     WILL_FIRE_RL_action_l264c41 ;
  assign ip$EN_parser =
	     WILL_FIRE_RL_action_l281c49 || WILL_FIRE_RL_action_l264c41 ;
  assign ip$EN_versionIHL = WILL_FIRE_RL_action_l264c41 ;

  // submodule tcp
  assign tcp$activate_v = !WILL_FIRE_RL_action_l370c65 ;
  assign tcp$headerOdd_odd = ipodd_topheader ;
  assign tcp$headerPair_pair = ippair_topheader ;
  assign tcp$pairOrodd_signal = eth_topheader[8] ;
  assign tcp$parser_d = data ;
  assign tcp$EN_activate =
	     WILL_FIRE_RL_action_l370c65 || WILL_FIRE_RL_action_l320c65 ;
  assign tcp$EN_parser =
	     WILL_FIRE_RL_action_l370c65 || WILL_FIRE_RL_action_l361c65 ||
	     i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288 ||
	     WILL_FIRE_RL_action_l320c65 ;
  assign tcp$EN_pairOrodd = WILL_FIRE_RL_action_l320c65 ;
  assign tcp$EN_headerPair =
	     WILL_FIRE_RL_action_l320c65 && !eth_topheader[8] ;
  assign tcp$EN_headerOdd = WILL_FIRE_RL_action_l320c65 && eth_topheader[8] ;

  // remaining internal signals
  assign IF_eth_ethType__9_EQ_0x86DD_7_AND_ip_nextProto_ETC___d63 =
	     (eth$ethType == 16'h86DD && ip$nextProtocol == 8'h06 &&
	      ip$version == 4'd6) ?
	       v__h2787 :
	       ((error || keep == 8'h0 || !valid) ?
		  294'h02000000000000000000000000000000000000000000000000000000000000000000000000 :
		  294'd0) ;
  assign NOT_ip_nextProtocol__1_EQ_0x6_2_26_OR_NOT_ip_v_ETC___d533 =
	     (ip$nextProtocol != 8'h06 ||
	      (ip$version != 4'd4 || ip4_checksum != 16'hFFFF) &&
	      ip$version != 4'd6) &&
	     !last ;
  assign NOT_ip_nextProtocol__1_EQ_0x6_2_26_OR_NOT_ip_v_ETC___d541 =
	     (ip$nextProtocol != 8'h06 ||
	      (ip$version != 4'd4 || ip4_checksum != 16'hFFFF) &&
	      ip$version != 4'd6) &&
	     last ;
  assign _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d155 =
	     { 1'd0, data[15:0] } + { 1'd0, x__h57988 } ;
  assign _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d197 =
	     { 1'd0, data[15:0] } + { 1'd0, checksum__h59166 } ;
  assign _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d252 =
	     { 1'd0, data[15:0] } + { 1'd0, x__h62779 } ;
  assign _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d277 =
	     { 1'd0, data[15:0] } + { 1'd0, x__h61792 } ;
  assign _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d310 =
	     { 1'd0, data[15:0] } + { 1'd0, x__h64167 } ;
  assign _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d521 =
	     { 1'd0, data[15:0] } + { 1'd0, x__h70245 } ;
  assign _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d149 =
	     { 1'd0, data[31:16] } + { 1'd0, x__h57902 } ;
  assign _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d190 =
	     { 1'd0, data[31:16] } + { 1'd0, x__h60306 } ;
  assign _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d246 =
	     { 1'd0, data[31:16] } + { 1'd0, x__h62693 } ;
  assign _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d271 =
	     { 1'd0, data[31:16] } + { 1'd0, x__h61706 } ;
  assign _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d304 =
	     { 1'd0, data[31:16] } + { 1'd0, x__h64081 } ;
  assign _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d515 =
	     { 1'd0, data[31:16] } + { 1'd0, x__h70159 } ;
  assign _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d143 =
	     { 1'd0, data[47:32] } + { 1'd0, x__h57816 } ;
  assign _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d184 =
	     { 1'd0, data[47:32] } + { 1'd0, checksum__h59795 } ;
  assign _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d240 =
	     { 1'd0, data[47:32] } + { 1'd0, x__h62607 } ;
  assign _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d265 =
	     { 1'd0, data[47:32] } + { 1'd0, x__h61620 } ;
  assign _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d298 =
	     { 1'd0, data[47:32] } + { 1'd0, x__h63995 } ;
  assign _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d509 =
	     { 1'd0, data[47:32] } + { 1'd0, x__h70073 } ;
  assign _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d137 =
	     { 1'd0, data[63:48] } + { 1'd0, eth_topheader } ;
  assign _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d178 =
	     { 1'd0, data[63:48] } + { 1'd0, ip4_checksum } ;
  assign _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d234 =
	     { 1'd0, data[63:48] } + { 1'd0, x__h62521 } ;
  assign _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d259 =
	     { 1'd0, data[63:48] } + { 1'd0, ippair_topheader } ;
  assign _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d292 =
	     { 1'd0, data[63:48] } + { 1'd0, tcp_checksum } ;
  assign _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d503 =
	     { 1'd0, data[63:48] } + { 1'd0, x__h69987 } ;
  assign _0_CONCAT_ip_ip4Dst__0_BITS_15_TO_0_18_19_PLUS__ETC___d338 =
	     { 1'd0, ip$ip4Dst[15:0] } + { 1'd0, x__h64703 } ;
  assign _0_CONCAT_ip_ip4Dst__0_BITS_31_TO_16_20_21_PLUS_ETC___d332 =
	     { 1'd0, ip$ip4Dst[31:16] } + { 1'd0, x__h64617 } ;
  assign _0_CONCAT_ip_ip4Src__1_BITS_15_TO_0_22_23_PLUS__ETC___d326 =
	     { 1'd0, ip$ip4Src[15:0] } + { 1'd0, ip$ip4Src[31:16] } ;
  assign _0_CONCAT_ip_ip6Dst__1_BITS_111_TO_96_67_68_PLU_ETC___d435 =
	     { 1'd0, ip$ip6Dst[111:96] } + { 1'd0, x__h66579 } ;
  assign _0_CONCAT_ip_ip6Dst__1_BITS_127_TO_112_69_70_PL_ETC___d429 =
	     { 1'd0, ip$ip6Dst[127:112] } + { 1'd0, x__h66493 } ;
  assign _0_CONCAT_ip_ip6Dst__1_BITS_15_TO_0_55_56_PLUS__ETC___d471 =
	     { 1'd0, ip$ip6Dst[15:0] } + { 1'd0, x__h67095 } ;
  assign _0_CONCAT_ip_ip6Dst__1_BITS_31_TO_16_57_58_PLUS_ETC___d465 =
	     { 1'd0, ip$ip6Dst[31:16] } + { 1'd0, x__h67009 } ;
  assign _0_CONCAT_ip_ip6Dst__1_BITS_47_TO_32_59_60_PLUS_ETC___d459 =
	     { 1'd0, ip$ip6Dst[47:32] } + { 1'd0, x__h66923 } ;
  assign _0_CONCAT_ip_ip6Dst__1_BITS_63_TO_48_61_62_PLUS_ETC___d453 =
	     { 1'd0, ip$ip6Dst[63:48] } + { 1'd0, x__h66837 } ;
  assign _0_CONCAT_ip_ip6Dst__1_BITS_79_TO_64_63_64_PLUS_ETC___d447 =
	     { 1'd0, ip$ip6Dst[79:64] } + { 1'd0, x__h66751 } ;
  assign _0_CONCAT_ip_ip6Dst__1_BITS_95_TO_80_65_66_PLUS_ETC___d441 =
	     { 1'd0, ip$ip6Dst[95:80] } + { 1'd0, x__h66665 } ;
  assign _0_CONCAT_ip_ip6Src__2_BITS_111_TO_96_83_84_PLU_ETC___d387 =
	     { 1'd0, ip$ip6Src[111:96] } + { 1'd0, ip$ip6Src[127:112] } ;
  assign _0_CONCAT_ip_ip6Src__2_BITS_15_TO_0_71_72_PLUS__ETC___d423 =
	     { 1'd0, ip$ip6Src[15:0] } + { 1'd0, x__h66407 } ;
  assign _0_CONCAT_ip_ip6Src__2_BITS_31_TO_16_73_74_PLUS_ETC___d417 =
	     { 1'd0, ip$ip6Src[31:16] } + { 1'd0, x__h66321 } ;
  assign _0_CONCAT_ip_ip6Src__2_BITS_47_TO_32_75_76_PLUS_ETC___d411 =
	     { 1'd0, ip$ip6Src[47:32] } + { 1'd0, x__h66235 } ;
  assign _0_CONCAT_ip_ip6Src__2_BITS_63_TO_48_77_78_PLUS_ETC___d405 =
	     { 1'd0, ip$ip6Src[63:48] } + { 1'd0, x__h66149 } ;
  assign _0_CONCAT_ip_ip6Src__2_BITS_79_TO_64_79_80_PLUS_ETC___d399 =
	     { 1'd0, ip$ip6Src[79:64] } + { 1'd0, x__h66063 } ;
  assign _0_CONCAT_ip_ip6Src__2_BITS_95_TO_80_81_82_PLUS_ETC___d393 =
	     { 1'd0, ip$ip6Src[95:80] } + { 1'd0, x__h65977 } ;
  assign _0_CONCAT_ip_length__15_16_PLUS_0_CONCAT_IF_0_C_ETC___d350 =
	     { 1'd0, ip$length } + { 1'd0, x__h64875 } ;
  assign _0_CONCAT_ip_length__15_16_PLUS_0_CONCAT_IF_0_C_ETC___d477 =
	     { 1'd0, ip$length } + { 1'd0, checksum__h67225 } ;
  assign _0_CONCAT_ip_nextProtocol__1_17_PLUS_0_CONCAT_I_ETC___d344 =
	     { 9'd0, ip$nextProtocol } + { 1'd0, x__h64789 } ;
  assign _0_CONCAT_ip_nextProtocol__1_17_PLUS_0_CONCAT_I_ETC___d483 =
	     { 9'd0, ip$nextProtocol } + { 1'd0, checksum__h67397 } ;
  assign _0_CONCAT_ipodd_topheader_15_BITS_15_TO_0_16_17_ETC___d228 =
	     { 1'd0, ipodd_topheader[15:0] } + { 1'd0, x__h62435 } ;
  assign _0_CONCAT_ipodd_topheader_15_BITS_31_TO_16_18_1_ETC___d222 =
	     { 1'd0, ipodd_topheader[31:16] } +
	     { 1'd0, ipodd_topheader[47:32] } ;
  assign _0_CONCAT_pseudo_header_95_96_PLUS_0_CONCAT_tcp_ETC___d497 =
	     { 1'd0, pseudo_header } + { 1'd0, tcp_checksum } ;
  assign abort_1_whas__77_AND_abort_1_wget__78_79_OR_st_ETC___d638 =
	     state_1_mkFSMstate == 3'd0 && (!start_reg_1_2 || state_1_fired) ;
  assign abort_whas__3_AND_abort_wget__4_5_OR_state_mkF_ETC___d565 =
	     state_mkFSMstate == 4'd0 && (!start_reg_1 || state_fired) ;
  assign checksum__h57753 =
	     _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d137[15:0] +
	     16'h0001 ;
  assign checksum__h57839 =
	     _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d143[15:0] +
	     16'h0001 ;
  assign checksum__h57925 =
	     _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d149[15:0] +
	     16'h0001 ;
  assign checksum__h58011 =
	     _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d155[15:0] +
	     16'h0001 ;
  assign checksum__h59166 =
	     _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d190[16] ?
	       checksum__h60329 :
	       _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d190[15:0] ;
  assign checksum__h59795 =
	     _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d178[16] ?
	       checksum__h60157 :
	       _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d178[15:0] ;
  assign checksum__h60157 =
	     _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d178[15:0] +
	     16'h0001 ;
  assign checksum__h60243 =
	     _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d184[15:0] +
	     16'h0001 ;
  assign checksum__h60329 =
	     _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d190[15:0] +
	     16'h0001 ;
  assign checksum__h60415 =
	     _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d197[15:0] +
	     16'h0001 ;
  assign checksum__h61557 =
	     _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d259[15:0] +
	     16'h0001 ;
  assign checksum__h61643 =
	     _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d265[15:0] +
	     16'h0001 ;
  assign checksum__h61729 =
	     _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d271[15:0] +
	     16'h0001 ;
  assign checksum__h61815 =
	     _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d277[15:0] +
	     16'h0001 ;
  assign checksum__h62372 =
	     _0_CONCAT_ipodd_topheader_15_BITS_31_TO_16_18_1_ETC___d222[15:0] +
	     16'h0001 ;
  assign checksum__h62458 =
	     _0_CONCAT_ipodd_topheader_15_BITS_15_TO_0_16_17_ETC___d228[15:0] +
	     16'h0001 ;
  assign checksum__h62544 =
	     _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d234[15:0] +
	     16'h0001 ;
  assign checksum__h62630 =
	     _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d240[15:0] +
	     16'h0001 ;
  assign checksum__h62716 =
	     _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d246[15:0] +
	     16'h0001 ;
  assign checksum__h62802 =
	     _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d252[15:0] +
	     16'h0001 ;
  assign checksum__h63932 =
	     _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d292[15:0] +
	     16'h0001 ;
  assign checksum__h64018 =
	     _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d298[15:0] +
	     16'h0001 ;
  assign checksum__h64104 =
	     _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d304[15:0] +
	     16'h0001 ;
  assign checksum__h64190 =
	     _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d310[15:0] +
	     16'h0001 ;
  assign checksum__h64554 =
	     _0_CONCAT_ip_ip4Src__1_BITS_15_TO_0_22_23_PLUS__ETC___d326[15:0] +
	     16'h0001 ;
  assign checksum__h64640 =
	     _0_CONCAT_ip_ip4Dst__0_BITS_31_TO_16_20_21_PLUS_ETC___d332[15:0] +
	     16'h0001 ;
  assign checksum__h64726 =
	     _0_CONCAT_ip_ip4Dst__0_BITS_15_TO_0_18_19_PLUS__ETC___d338[15:0] +
	     16'h0001 ;
  assign checksum__h64812 =
	     _0_CONCAT_ip_nextProtocol__1_17_PLUS_0_CONCAT_I_ETC___d344[15:0] +
	     16'h0001 ;
  assign checksum__h64898 =
	     _0_CONCAT_ip_length__15_16_PLUS_0_CONCAT_IF_0_C_ETC___d350[15:0] +
	     16'h0001 ;
  assign checksum__h65914 =
	     _0_CONCAT_ip_ip6Src__2_BITS_111_TO_96_83_84_PLU_ETC___d387[15:0] +
	     16'h0001 ;
  assign checksum__h66000 =
	     _0_CONCAT_ip_ip6Src__2_BITS_95_TO_80_81_82_PLUS_ETC___d393[15:0] +
	     16'h0001 ;
  assign checksum__h66086 =
	     _0_CONCAT_ip_ip6Src__2_BITS_79_TO_64_79_80_PLUS_ETC___d399[15:0] +
	     16'h0001 ;
  assign checksum__h66172 =
	     _0_CONCAT_ip_ip6Src__2_BITS_63_TO_48_77_78_PLUS_ETC___d405[15:0] +
	     16'h0001 ;
  assign checksum__h66258 =
	     _0_CONCAT_ip_ip6Src__2_BITS_47_TO_32_75_76_PLUS_ETC___d411[15:0] +
	     16'h0001 ;
  assign checksum__h66344 =
	     _0_CONCAT_ip_ip6Src__2_BITS_31_TO_16_73_74_PLUS_ETC___d417[15:0] +
	     16'h0001 ;
  assign checksum__h66430 =
	     _0_CONCAT_ip_ip6Src__2_BITS_15_TO_0_71_72_PLUS__ETC___d423[15:0] +
	     16'h0001 ;
  assign checksum__h66516 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_127_TO_112_69_70_PL_ETC___d429[15:0] +
	     16'h0001 ;
  assign checksum__h66602 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_111_TO_96_67_68_PLU_ETC___d435[15:0] +
	     16'h0001 ;
  assign checksum__h66688 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_95_TO_80_65_66_PLUS_ETC___d441[15:0] +
	     16'h0001 ;
  assign checksum__h66774 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_79_TO_64_63_64_PLUS_ETC___d447[15:0] +
	     16'h0001 ;
  assign checksum__h66860 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_63_TO_48_61_62_PLUS_ETC___d453[15:0] +
	     16'h0001 ;
  assign checksum__h66946 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_47_TO_32_59_60_PLUS_ETC___d459[15:0] +
	     16'h0001 ;
  assign checksum__h67032 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_31_TO_16_57_58_PLUS_ETC___d465[15:0] +
	     16'h0001 ;
  assign checksum__h67118 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_15_TO_0_55_56_PLUS__ETC___d471[15:0] +
	     16'h0001 ;
  assign checksum__h67225 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_15_TO_0_55_56_PLUS__ETC___d471[16] ?
	       checksum__h67118 :
	       _0_CONCAT_ip_ip6Dst__1_BITS_15_TO_0_55_56_PLUS__ETC___d471[15:0] ;
  assign checksum__h67290 =
	     _0_CONCAT_ip_length__15_16_PLUS_0_CONCAT_IF_0_C_ETC___d477[15:0] +
	     16'h0001 ;
  assign checksum__h67397 =
	     _0_CONCAT_ip_length__15_16_PLUS_0_CONCAT_IF_0_C_ETC___d477[16] ?
	       checksum__h67290 :
	       _0_CONCAT_ip_length__15_16_PLUS_0_CONCAT_IF_0_C_ETC___d477[15:0] ;
  assign checksum__h67462 =
	     _0_CONCAT_ip_nextProtocol__1_17_PLUS_0_CONCAT_I_ETC___d483[15:0] +
	     16'h0001 ;
  assign checksum__h69924 =
	     _0_CONCAT_pseudo_header_95_96_PLUS_0_CONCAT_tcp_ETC___d497[15:0] +
	     16'h0001 ;
  assign checksum__h70010 =
	     _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d503[15:0] +
	     16'h0001 ;
  assign checksum__h70096 =
	     _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d509[15:0] +
	     16'h0001 ;
  assign checksum__h70182 =
	     _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d515[15:0] +
	     16'h0001 ;
  assign checksum__h70268 =
	     _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d521[15:0] +
	     16'h0001 ;
  assign eth_topheader_20_BITS_11_TO_8_21_ULT_5___d122 =
	     eth_topheader[11:8] < 4'd5 ;
  assign i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288 =
	     i == 32'd0 &&
	     ip_nextProtocol__1_EQ_0x6_2_AND_ip_version__4__ETC___d283 &&
	     (state_mkFSMstate == 4'd3 || state_mkFSMstate == 4'd4) ||
	     state_mkFSMstate == 4'd5 ;
  assign i_65_ULE_8___d173 = i <= 32'd8 ;
  assign ip_nextProtocol__1_EQ_0x6_2_AND_ip_version__4__ETC___d212 =
	     ip$nextProtocol == 8'h06 &&
	     (ip$version == 4'd4 && ip4_checksum == 16'hFFFF ||
	      ip$version == 4'd6) &&
	     !last ;
  assign ip_nextProtocol__1_EQ_0x6_2_AND_ip_version__4__ETC___d283 =
	     ip$nextProtocol == 8'h06 &&
	     (ip$version == 4'd4 && ip4_checksum == 16'hFFFF ||
	      ip$version == 4'd6) &&
	     last ;
  assign v__h2767 =
	     { 198'h11000000000000000000000000000000000000000000000000,
	       ip$ip4Dst,
	       ip$ip4Src,
	       tcp$portDst,
	       tcp$portSrc } ;
  assign v__h2787 =
	     { 6'd25, ip$ip6Dst, ip$ip6Src, tcp$portDst, tcp$portSrc } ;
  assign x__h57816 =
	     _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d137[16] ?
	       checksum__h57753 :
	       _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d137[15:0] ;
  assign x__h57902 =
	     _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d143[16] ?
	       checksum__h57839 :
	       _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d143[15:0] ;
  assign x__h57988 =
	     _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d149[16] ?
	       checksum__h57925 :
	       _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d149[15:0] ;
  assign x__h58095 = x__h58118 - 32'd8 ;
  assign x__h58118 = { 26'd0, eth_topheader[11:8], 2'd0 } ;
  assign x__h59891 =
	     _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d197[16] ?
	       checksum__h60415 :
	       _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d197[15:0] ;
  assign x__h60306 =
	     _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d184[16] ?
	       checksum__h60243 :
	       _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d184[15:0] ;
  assign x__h60470 = i - 32'd8 ;
  assign x__h60988 =
	     _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d277[16] ?
	       checksum__h61815 :
	       _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d277[15:0] ;
  assign x__h61620 =
	     _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d259[16] ?
	       checksum__h61557 :
	       _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d259[15:0] ;
  assign x__h61706 =
	     _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d265[16] ?
	       checksum__h61643 :
	       _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d265[15:0] ;
  assign x__h61792 =
	     _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d271[16] ?
	       checksum__h61729 :
	       _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d271[15:0] ;
  assign x__h61921 =
	     _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d252[16] ?
	       checksum__h62802 :
	       _0_CONCAT_data_15_BITS_15_TO_0_19_29_PLUS_0_CON_ETC___d252[15:0] ;
  assign x__h62435 =
	     _0_CONCAT_ipodd_topheader_15_BITS_31_TO_16_18_1_ETC___d222[16] ?
	       checksum__h62372 :
	       _0_CONCAT_ipodd_topheader_15_BITS_31_TO_16_18_1_ETC___d222[15:0] ;
  assign x__h62521 =
	     _0_CONCAT_ipodd_topheader_15_BITS_15_TO_0_16_17_ETC___d228[16] ?
	       checksum__h62458 :
	       _0_CONCAT_ipodd_topheader_15_BITS_15_TO_0_16_17_ETC___d228[15:0] ;
  assign x__h62607 =
	     _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d234[16] ?
	       checksum__h62544 :
	       _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d234[15:0] ;
  assign x__h62693 =
	     _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d240[16] ?
	       checksum__h62630 :
	       _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d240[15:0] ;
  assign x__h62779 =
	     _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d246[16] ?
	       checksum__h62716 :
	       _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d246[15:0] ;
  assign x__h63995 =
	     _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d292[16] ?
	       checksum__h63932 :
	       _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d292[15:0] ;
  assign x__h64081 =
	     _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d298[16] ?
	       checksum__h64018 :
	       _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d298[15:0] ;
  assign x__h64167 =
	     _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d304[16] ?
	       checksum__h64104 :
	       _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d304[15:0] ;
  assign x__h64253 =
	     _0_CONCAT_ip_length__15_16_PLUS_0_CONCAT_IF_0_C_ETC___d350[16] ?
	       checksum__h64898 :
	       _0_CONCAT_ip_length__15_16_PLUS_0_CONCAT_IF_0_C_ETC___d350[15:0] ;
  assign x__h64617 =
	     _0_CONCAT_ip_ip4Src__1_BITS_15_TO_0_22_23_PLUS__ETC___d326[16] ?
	       checksum__h64554 :
	       _0_CONCAT_ip_ip4Src__1_BITS_15_TO_0_22_23_PLUS__ETC___d326[15:0] ;
  assign x__h64703 =
	     _0_CONCAT_ip_ip4Dst__0_BITS_31_TO_16_20_21_PLUS_ETC___d332[16] ?
	       checksum__h64640 :
	       _0_CONCAT_ip_ip4Dst__0_BITS_31_TO_16_20_21_PLUS_ETC___d332[15:0] ;
  assign x__h64789 =
	     _0_CONCAT_ip_ip4Dst__0_BITS_15_TO_0_18_19_PLUS__ETC___d338[16] ?
	       checksum__h64726 :
	       _0_CONCAT_ip_ip4Dst__0_BITS_15_TO_0_18_19_PLUS__ETC___d338[15:0] ;
  assign x__h64875 =
	     _0_CONCAT_ip_nextProtocol__1_17_PLUS_0_CONCAT_I_ETC___d344[16] ?
	       checksum__h64812 :
	       _0_CONCAT_ip_nextProtocol__1_17_PLUS_0_CONCAT_I_ETC___d344[15:0] ;
  assign x__h64946 =
	     _0_CONCAT_ip_nextProtocol__1_17_PLUS_0_CONCAT_I_ETC___d483[16] ?
	       checksum__h67462 :
	       _0_CONCAT_ip_nextProtocol__1_17_PLUS_0_CONCAT_I_ETC___d483[15:0] ;
  assign x__h65977 =
	     _0_CONCAT_ip_ip6Src__2_BITS_111_TO_96_83_84_PLU_ETC___d387[16] ?
	       checksum__h65914 :
	       _0_CONCAT_ip_ip6Src__2_BITS_111_TO_96_83_84_PLU_ETC___d387[15:0] ;
  assign x__h66063 =
	     _0_CONCAT_ip_ip6Src__2_BITS_95_TO_80_81_82_PLUS_ETC___d393[16] ?
	       checksum__h66000 :
	       _0_CONCAT_ip_ip6Src__2_BITS_95_TO_80_81_82_PLUS_ETC___d393[15:0] ;
  assign x__h66149 =
	     _0_CONCAT_ip_ip6Src__2_BITS_79_TO_64_79_80_PLUS_ETC___d399[16] ?
	       checksum__h66086 :
	       _0_CONCAT_ip_ip6Src__2_BITS_79_TO_64_79_80_PLUS_ETC___d399[15:0] ;
  assign x__h66235 =
	     _0_CONCAT_ip_ip6Src__2_BITS_63_TO_48_77_78_PLUS_ETC___d405[16] ?
	       checksum__h66172 :
	       _0_CONCAT_ip_ip6Src__2_BITS_63_TO_48_77_78_PLUS_ETC___d405[15:0] ;
  assign x__h66321 =
	     _0_CONCAT_ip_ip6Src__2_BITS_47_TO_32_75_76_PLUS_ETC___d411[16] ?
	       checksum__h66258 :
	       _0_CONCAT_ip_ip6Src__2_BITS_47_TO_32_75_76_PLUS_ETC___d411[15:0] ;
  assign x__h66407 =
	     _0_CONCAT_ip_ip6Src__2_BITS_31_TO_16_73_74_PLUS_ETC___d417[16] ?
	       checksum__h66344 :
	       _0_CONCAT_ip_ip6Src__2_BITS_31_TO_16_73_74_PLUS_ETC___d417[15:0] ;
  assign x__h66493 =
	     _0_CONCAT_ip_ip6Src__2_BITS_15_TO_0_71_72_PLUS__ETC___d423[16] ?
	       checksum__h66430 :
	       _0_CONCAT_ip_ip6Src__2_BITS_15_TO_0_71_72_PLUS__ETC___d423[15:0] ;
  assign x__h66579 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_127_TO_112_69_70_PL_ETC___d429[16] ?
	       checksum__h66516 :
	       _0_CONCAT_ip_ip6Dst__1_BITS_127_TO_112_69_70_PL_ETC___d429[15:0] ;
  assign x__h66665 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_111_TO_96_67_68_PLU_ETC___d435[16] ?
	       checksum__h66602 :
	       _0_CONCAT_ip_ip6Dst__1_BITS_111_TO_96_67_68_PLU_ETC___d435[15:0] ;
  assign x__h66751 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_95_TO_80_65_66_PLUS_ETC___d441[16] ?
	       checksum__h66688 :
	       _0_CONCAT_ip_ip6Dst__1_BITS_95_TO_80_65_66_PLUS_ETC___d441[15:0] ;
  assign x__h66837 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_79_TO_64_63_64_PLUS_ETC___d447[16] ?
	       checksum__h66774 :
	       _0_CONCAT_ip_ip6Dst__1_BITS_79_TO_64_63_64_PLUS_ETC___d447[15:0] ;
  assign x__h66923 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_63_TO_48_61_62_PLUS_ETC___d453[16] ?
	       checksum__h66860 :
	       _0_CONCAT_ip_ip6Dst__1_BITS_63_TO_48_61_62_PLUS_ETC___d453[15:0] ;
  assign x__h67009 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_47_TO_32_59_60_PLUS_ETC___d459[16] ?
	       checksum__h66946 :
	       _0_CONCAT_ip_ip6Dst__1_BITS_47_TO_32_59_60_PLUS_ETC___d459[15:0] ;
  assign x__h67095 =
	     _0_CONCAT_ip_ip6Dst__1_BITS_31_TO_16_57_58_PLUS_ETC___d465[16] ?
	       checksum__h67032 :
	       _0_CONCAT_ip_ip6Dst__1_BITS_31_TO_16_57_58_PLUS_ETC___d465[15:0] ;
  assign x__h69987 =
	     _0_CONCAT_pseudo_header_95_96_PLUS_0_CONCAT_tcp_ETC___d497[16] ?
	       checksum__h69924 :
	       _0_CONCAT_pseudo_header_95_96_PLUS_0_CONCAT_tcp_ETC___d497[15:0] ;
  assign x__h70073 =
	     _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d503[16] ?
	       checksum__h70010 :
	       _0_CONCAT_data_15_BITS_63_TO_48_34_35_PLUS_0_CO_ETC___d503[15:0] ;
  assign x__h70159 =
	     _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d509[16] ?
	       checksum__h70096 :
	       _0_CONCAT_data_15_BITS_47_TO_32_32_33_PLUS_0_CO_ETC___d509[15:0] ;
  assign x__h70245 =
	     _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d515[16] ?
	       checksum__h70182 :
	       _0_CONCAT_data_15_BITS_31_TO_16_30_31_PLUS_0_CO_ETC___d515[15:0] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        check <= `BSV_ASSIGNMENT_DELAY 1'd0;
	data <= `BSV_ASSIGNMENT_DELAY 64'hAAAAAAAAAAAAAAAA;
	error <= `BSV_ASSIGNMENT_DELAY 1'd0;
	eth_topheader <= `BSV_ASSIGNMENT_DELAY 16'hAAAA;
	finish <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	ip4_checksum <= `BSV_ASSIGNMENT_DELAY 16'hAAAA;
	ipodd_topheader <= `BSV_ASSIGNMENT_DELAY 48'hAAAAAAAAAAAA;
	ippair_topheader <= `BSV_ASSIGNMENT_DELAY 16'hAAAA;
	keep <= `BSV_ASSIGNMENT_DELAY 8'hFF;
	last <= `BSV_ASSIGNMENT_DELAY 1'b0;
	pseudo_header <= `BSV_ASSIGNMENT_DELAY 16'hAAAA;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	running_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rx_data <= `BSV_ASSIGNMENT_DELAY 64'hAAAAAAAAAAAAAAAA;
	rx_keep <= `BSV_ASSIGNMENT_DELAY 8'hFF;
	rx_last <= `BSV_ASSIGNMENT_DELAY 1'b0;
	rx_user <= `BSV_ASSIGNMENT_DELAY 1'b0;
	rx_valid <= `BSV_ASSIGNMENT_DELAY 1'b0;
	start <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_1_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
	tcp_checksum <= `BSV_ASSIGNMENT_DELAY 16'hAAAA;
	tx_data <= `BSV_ASSIGNMENT_DELAY 64'hAAAAAAAAAAAAAAAA;
	tx_keep <= `BSV_ASSIGNMENT_DELAY 8'hFF;
	tx_last <= `BSV_ASSIGNMENT_DELAY 1'b0;
	tx_ready <= `BSV_ASSIGNMENT_DELAY 1'b1;
	tx_user <= `BSV_ASSIGNMENT_DELAY 1'b0;
	tx_valid <= `BSV_ASSIGNMENT_DELAY 1'b0;
	valid <= `BSV_ASSIGNMENT_DELAY 1'b0;
      end
    else
      begin
        if (check$EN) check <= `BSV_ASSIGNMENT_DELAY check$D_IN;
	if (data$EN) data <= `BSV_ASSIGNMENT_DELAY data$D_IN;
	if (error$EN) error <= `BSV_ASSIGNMENT_DELAY error$D_IN;
	if (eth_topheader$EN)
	  eth_topheader <= `BSV_ASSIGNMENT_DELAY eth_topheader$D_IN;
	if (finish$EN) finish <= `BSV_ASSIGNMENT_DELAY finish$D_IN;
	if (i$EN) i <= `BSV_ASSIGNMENT_DELAY i$D_IN;
	if (ip4_checksum$EN)
	  ip4_checksum <= `BSV_ASSIGNMENT_DELAY ip4_checksum$D_IN;
	if (ipodd_topheader$EN)
	  ipodd_topheader <= `BSV_ASSIGNMENT_DELAY ipodd_topheader$D_IN;
	if (ippair_topheader$EN)
	  ippair_topheader <= `BSV_ASSIGNMENT_DELAY ippair_topheader$D_IN;
	if (keep$EN) keep <= `BSV_ASSIGNMENT_DELAY keep$D_IN;
	if (last$EN) last <= `BSV_ASSIGNMENT_DELAY last$D_IN;
	if (pseudo_header$EN)
	  pseudo_header <= `BSV_ASSIGNMENT_DELAY pseudo_header$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (running_1$EN) running_1 <= `BSV_ASSIGNMENT_DELAY running_1$D_IN;
	if (rx_data$EN) rx_data <= `BSV_ASSIGNMENT_DELAY rx_data$D_IN;
	if (rx_keep$EN) rx_keep <= `BSV_ASSIGNMENT_DELAY rx_keep$D_IN;
	if (rx_last$EN) rx_last <= `BSV_ASSIGNMENT_DELAY rx_last$D_IN;
	if (rx_user$EN) rx_user <= `BSV_ASSIGNMENT_DELAY rx_user$D_IN;
	if (rx_valid$EN) rx_valid <= `BSV_ASSIGNMENT_DELAY rx_valid$D_IN;
	if (start$EN) start <= `BSV_ASSIGNMENT_DELAY start$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (start_reg_1_1$EN)
	  start_reg_1_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1_1$D_IN;
	if (start_reg_1_2$EN)
	  start_reg_1_2 <= `BSV_ASSIGNMENT_DELAY start_reg_1_2$D_IN;
	if (state_1_can_overlap$EN)
	  state_1_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      state_1_can_overlap$D_IN;
	if (state_1_fired$EN)
	  state_1_fired <= `BSV_ASSIGNMENT_DELAY state_1_fired$D_IN;
	if (state_1_mkFSMstate$EN)
	  state_1_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_1_mkFSMstate$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
	if (tcp_checksum$EN)
	  tcp_checksum <= `BSV_ASSIGNMENT_DELAY tcp_checksum$D_IN;
	if (tx_data$EN) tx_data <= `BSV_ASSIGNMENT_DELAY tx_data$D_IN;
	if (tx_keep$EN) tx_keep <= `BSV_ASSIGNMENT_DELAY tx_keep$D_IN;
	if (tx_last$EN) tx_last <= `BSV_ASSIGNMENT_DELAY tx_last$D_IN;
	if (tx_ready$EN) tx_ready <= `BSV_ASSIGNMENT_DELAY tx_ready$D_IN;
	if (tx_user$EN) tx_user <= `BSV_ASSIGNMENT_DELAY tx_user$D_IN;
	if (tx_valid$EN) tx_valid <= `BSV_ASSIGNMENT_DELAY tx_valid$D_IN;
	if (valid$EN) valid <= `BSV_ASSIGNMENT_DELAY valid$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    check = 1'h0;
    data = 64'hAAAAAAAAAAAAAAAA;
    error = 1'h0;
    eth_topheader = 16'hAAAA;
    finish = 1'h0;
    i = 32'hAAAAAAAA;
    ip4_checksum = 16'hAAAA;
    ipodd_topheader = 48'hAAAAAAAAAAAA;
    ippair_topheader = 16'hAAAA;
    keep = 8'hAA;
    last = 1'h0;
    pseudo_header = 16'hAAAA;
    running = 1'h0;
    running_1 = 1'h0;
    rx_data = 64'hAAAAAAAAAAAAAAAA;
    rx_keep = 8'hAA;
    rx_last = 1'h0;
    rx_user = 1'h0;
    rx_valid = 1'h0;
    start = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    start_reg_1_1 = 1'h0;
    start_reg_1_2 = 1'h0;
    state_1_can_overlap = 1'h0;
    state_1_fired = 1'h0;
    state_1_mkFSMstate = 3'h2;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 4'hA;
    tcp_checksum = 16'hAAAA;
    tx_data = 64'hAAAAAAAAAAAAAAAA;
    tx_keep = 8'hAA;
    tx_last = 1'h0;
    tx_ready = 1'h0;
    tx_user = 1'h0;
    tx_valid = 1'h0;
    valid = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l390c73 &&
	  (WILL_FIRE_RL_action_l392c65 || WILL_FIRE_RL_action_l406c57 ||
	   WILL_FIRE_RL_action_l408c49))
	$display("Error: \"Network.bsv\", line 390, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l390c73] and\n  [RL_action_l392c65, RL_action_l406c57, RL_action_l408c49] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l392c65 &&
	  (WILL_FIRE_RL_action_l406c57 || WILL_FIRE_RL_action_l408c49))
	$display("Error: \"Network.bsv\", line 392, column 65: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l392c65] and\n  [RL_action_l406c57, RL_action_l408c49] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l406c57 && WILL_FIRE_RL_action_l408c49)
	$display("Error: \"Network.bsv\", line 406, column 57: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l406c57] and\n  [RL_action_l408c49] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (running &&
	  abort_whas__3_AND_abort_wget__4_5_OR_state_mkF_ETC___d565 &&
	  !start_reg)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l175c25 &&
	  (state_mkFSMstate == 4'd1 || WILL_FIRE_RL_action_l264c41 ||
	   WILL_FIRE_RL_action_l281c49 ||
	   WILL_FIRE_RL_action_l320c65 ||
	   i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288 ||
	   WILL_FIRE_RL_action_l361c65 ||
	   WILL_FIRE_RL_action_l370c65 ||
	   WILL_FIRE_RL_action_l390c73 ||
	   WILL_FIRE_RL_action_l392c65 ||
	   WILL_FIRE_RL_action_l406c57 ||
	   WILL_FIRE_RL_action_l408c49))
	$display("Error: \"Network.bsv\", line 175, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l175c25] and\n  [RL_action_l182c25, RL_action_l264c41, RL_action_l281c49, RL_action_l320c65,\n  RL_action_l344c57, RL_action_l361c65, RL_action_l370c65, RL_action_l390c73,\n  RL_action_l392c65, RL_action_l406c57, RL_action_l408c49] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd1 &&
	  (WILL_FIRE_RL_action_l264c41 || WILL_FIRE_RL_action_l281c49 ||
	   WILL_FIRE_RL_action_l320c65 ||
	   i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288 ||
	   WILL_FIRE_RL_action_l361c65 ||
	   WILL_FIRE_RL_action_l370c65 ||
	   WILL_FIRE_RL_action_l390c73 ||
	   WILL_FIRE_RL_action_l392c65 ||
	   WILL_FIRE_RL_action_l406c57 ||
	   WILL_FIRE_RL_action_l408c49))
	$display("Error: \"Network.bsv\", line 182, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l182c25] and\n  [RL_action_l264c41, RL_action_l281c49, RL_action_l320c65, RL_action_l344c57,\n  RL_action_l361c65, RL_action_l370c65, RL_action_l390c73, RL_action_l392c65,\n  RL_action_l406c57, RL_action_l408c49] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l264c41 &&
	  (WILL_FIRE_RL_action_l281c49 || WILL_FIRE_RL_action_l320c65 ||
	   i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288 ||
	   WILL_FIRE_RL_action_l361c65 ||
	   WILL_FIRE_RL_action_l370c65 ||
	   WILL_FIRE_RL_action_l390c73 ||
	   WILL_FIRE_RL_action_l392c65 ||
	   WILL_FIRE_RL_action_l406c57 ||
	   WILL_FIRE_RL_action_l408c49))
	$display("Error: \"Network.bsv\", line 264, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l264c41] and\n  [RL_action_l281c49, RL_action_l320c65, RL_action_l344c57, RL_action_l361c65,\n  RL_action_l370c65, RL_action_l390c73, RL_action_l392c65, RL_action_l406c57,\n  RL_action_l408c49] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l281c49 &&
	  (WILL_FIRE_RL_action_l320c65 ||
	   i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288 ||
	   WILL_FIRE_RL_action_l361c65 ||
	   WILL_FIRE_RL_action_l370c65 ||
	   WILL_FIRE_RL_action_l390c73 ||
	   WILL_FIRE_RL_action_l392c65 ||
	   WILL_FIRE_RL_action_l406c57 ||
	   WILL_FIRE_RL_action_l408c49))
	$display("Error: \"Network.bsv\", line 281, column 49: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l281c49] and\n  [RL_action_l320c65, RL_action_l344c57, RL_action_l361c65, RL_action_l370c65,\n  RL_action_l390c73, RL_action_l392c65, RL_action_l406c57, RL_action_l408c49]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l320c65 &&
	  (i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288 ||
	   WILL_FIRE_RL_action_l361c65 ||
	   WILL_FIRE_RL_action_l370c65 ||
	   WILL_FIRE_RL_action_l390c73 ||
	   WILL_FIRE_RL_action_l392c65 ||
	   WILL_FIRE_RL_action_l406c57 ||
	   WILL_FIRE_RL_action_l408c49))
	$display("Error: \"Network.bsv\", line 320, column 65: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l320c65] and\n  [RL_action_l344c57, RL_action_l361c65, RL_action_l370c65, RL_action_l390c73,\n  RL_action_l392c65, RL_action_l406c57, RL_action_l408c49] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (i_65_EQ_0_66_AND_ip_nextProtocol__1_EQ_0x6_2_A_ETC___d288 &&
	  (WILL_FIRE_RL_action_l361c65 || WILL_FIRE_RL_action_l370c65 ||
	   WILL_FIRE_RL_action_l390c73 ||
	   WILL_FIRE_RL_action_l392c65 ||
	   WILL_FIRE_RL_action_l406c57 ||
	   WILL_FIRE_RL_action_l408c49))
	$display("Error: \"Network.bsv\", line 344, column 57: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l344c57] and\n  [RL_action_l361c65, RL_action_l370c65, RL_action_l390c73, RL_action_l392c65,\n  RL_action_l406c57, RL_action_l408c49] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l361c65 &&
	  (WILL_FIRE_RL_action_l370c65 || WILL_FIRE_RL_action_l390c73 ||
	   WILL_FIRE_RL_action_l392c65 ||
	   WILL_FIRE_RL_action_l406c57 ||
	   WILL_FIRE_RL_action_l408c49))
	$display("Error: \"Network.bsv\", line 361, column 65: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l361c65] and\n  [RL_action_l370c65, RL_action_l390c73, RL_action_l392c65, RL_action_l406c57,\n  RL_action_l408c49] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l370c65 &&
	  (WILL_FIRE_RL_action_l390c73 || WILL_FIRE_RL_action_l392c65 ||
	   WILL_FIRE_RL_action_l406c57 ||
	   WILL_FIRE_RL_action_l408c49))
	$display("Error: \"Network.bsv\", line 370, column 65: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l370c65] and\n  [RL_action_l390c73, RL_action_l392c65, RL_action_l406c57, RL_action_l408c49]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l435c33 && WILL_FIRE_RL_action_l453c41)
	$display("Error: \"Network.bsv\", line 435, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l435c33] and\n  [RL_action_l453c41] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (running_1 &&
	  abort_1_whas__77_AND_abort_1_wget__78_79_OR_st_ETC___d638 &&
	  !start_reg_1_1)
	$finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkNetwork

